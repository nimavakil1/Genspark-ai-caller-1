<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title || 'AI Sales Dashboard' %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --info-color: #17a2b8;
            --sidebar-bg: #2c3e50;
            --sidebar-active: #3498db;
        }

        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .sidebar {
            background: linear-gradient(180deg, var(--sidebar-bg) 0%, #34495e 100%);
            min-height: 100vh;
            width: 250px;
            position: fixed;
            left: 0;
            top: 0;
            z-index: 1000;
            transition: transform 0.3s ease;
        }

        .sidebar.collapsed {
            transform: translateX(-100%);
        }

        .sidebar-header {
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            text-align: center;
        }

        .sidebar-header h4 {
            color: white;
            margin: 0;
            font-size: 1.2rem;
        }

        .sidebar-menu {
            list-style: none;
            padding: 0;
            margin: 1rem 0;
        }

        .sidebar-menu li {
            margin: 0;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 1rem 1.5rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 3px solid transparent;
        }

        .sidebar-menu a:hover,
        .sidebar-menu a.active {
            background-color: rgba(255, 255, 255, 0.1);
            color: white;
            border-left-color: var(--sidebar-active);
        }

        .sidebar-menu i {
            width: 20px;
            margin-right: 10px;
            text-align: center;
        }

        .main-content {
            margin-left: 250px;
            padding: 0;
            transition: margin-left 0.3s ease;
        }

        .main-content.expanded {
            margin-left: 0;
        }

        .top-navbar {
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 1rem 2rem;
            display: flex;
            justify-content: between;
            align-items: center;
        }

        .content-area {
            padding: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            border-left: 4px solid var(--primary-color);
            transition: transform 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-card.success {
            border-left-color: var(--success-color);
        }

        .stat-card.warning {
            border-left-color: var(--warning-color);
        }

        .stat-card.danger {
            border-left-color: var(--danger-color);
        }

        .stat-card.info {
            border-left-color: var(--info-color);
        }

        .stat-icon {
            font-size: 2.5rem;
            opacity: 0.8;
        }

        .btn-primary {
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
            border: none;
            border-radius: 8px;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .card-header {
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 10px 10px 0 0 !important;
            border: none;
        }

        .table th {
            border-top: none;
            background-color: #f8f9fa;
            font-weight: 600;
        }

        .badge {
            font-size: 0.75rem;
            padding: 0.4em 0.8em;
        }

        .modal-content {
            border: none;
            border-radius: 15px;
        }

        .modal-header {
            background: linear-gradient(45deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 15px 15px 0 0;
        }

        .form-control, .form-select {
            border-radius: 8px;
            border: 2px solid #e9ecef;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .loading {
            display: none;
            text-align: center;
            padding: 2rem;
        }

        .sidebar-toggle {
            display: none;
        }

        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
            }
            
            .sidebar.show {
                transform: translateX(0);
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .sidebar-toggle {
                display: inline-block;
            }
            
            .content-area {
                padding: 1rem;
            }
        }

        /* Voice Activity Indicator */
        .voice-activity-indicator {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
            border-radius: 10px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .activity-bars {
            display: flex;
            align-items: end;
            gap: 3px;
            height: 30px;
            margin-right: 10px;
        }

        .activity-bars .bar {
            width: 4px;
            background-color: rgba(255, 255, 255, 0.6);
            border-radius: 2px;
            animation: activity-pulse 1.2s ease-in-out infinite alternate;
        }

        .activity-bars .bar:nth-child(1) { height: 10px; animation-delay: 0s; }
        .activity-bars .bar:nth-child(2) { height: 20px; animation-delay: 0.2s; }
        .activity-bars .bar:nth-child(3) { height: 15px; animation-delay: 0.4s; }
        .activity-bars .bar:nth-child(4) { height: 25px; animation-delay: 0.6s; }

        @keyframes activity-pulse {
            0% {
                background-color: rgba(255, 255, 255, 0.4);
                transform: scaleY(0.5);
            }
            100% {
                background-color: rgba(255, 255, 255, 1);
                transform: scaleY(1);
            }
        }

        .voice-activity-indicator.speaking .activity-bars .bar {
            background-color: #28a745;
            animation-duration: 0.3s;
        }

        .voice-activity-indicator.listening .activity-bars .bar {
            background-color: #17a2b8;
            animation-duration: 1s;
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <nav class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h4><i class="fas fa-phone-volume me-2"></i>AI Sales</h4>
            <small class="text-light">Receipt Roll System</small>
        </div>
        <ul class="sidebar-menu">
            <li><a href="#" class="nav-link active" data-section="overview"><i class="fas fa-chart-pie"></i>Overview</a></li>
            <li><a href="#" class="nav-link" data-section="customers"><i class="fas fa-users"></i>Customers</a></li>
            <li><a href="#" class="nav-link" data-section="calls"><i class="fas fa-phone"></i>Calls</a></li>
            <li><a href="#" class="nav-link" data-section="agents"><i class="fas fa-robot"></i>AI Agents</a></li>
            <li><a href="#" class="nav-link" data-section="products"><i class="fas fa-box"></i>Products</a></li>
            <li><a href="#" class="nav-link" data-section="orders"><i class="fas fa-shopping-cart"></i>Orders</a></li>
            <li><a href="#" class="nav-link" data-section="analytics"><i class="fas fa-chart-line"></i>Analytics</a></li>
            <li><a href="#" class="nav-link" data-section="settings"><i class="fas fa-cog"></i>Settings</a></li>
        </ul>
        <div class="mt-auto p-3">
            <button class="btn btn-outline-light btn-sm w-100" onclick="logout()">
                <i class="fas fa-sign-out-alt me-2"></i>Logout
            </button>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="main-content" id="mainContent">
        <!-- Top Navigation -->
        <nav class="top-navbar">
            <div class="d-flex align-items-center">
                <button class="btn btn-link sidebar-toggle me-3" onclick="toggleSidebar()">
                    <i class="fas fa-bars"></i>
                </button>
                <h5 class="mb-0" id="pageTitle">Dashboard Overview</h5>
            </div>
            <div class="d-flex align-items-center">
                <span class="me-3">Welcome, <strong><%= user.first_name || user.username %></strong></span>
                <img src="https://via.placeholder.com/32x32/667eea/ffffff?text=<%= (user.first_name || user.username).charAt(0).toUpperCase() %>" 
                     class="rounded-circle" alt="Avatar">
            </div>
        </nav>

        <!-- Content Area -->
        <div class="content-area">
            <!-- Overview Section -->
            <div id="overview-section" class="content-section">
                <!-- Stats Cards -->
                <div class="row mb-4">
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="stat-card">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-muted mb-2">Total Customers</h6>
                                    <h3 class="mb-0" id="totalCustomers">-</h3>
                                    <small class="text-muted">Active accounts</small>
                                </div>
                                <div class="stat-icon text-primary">
                                    <i class="fas fa-users"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="stat-card success">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-muted mb-2">Receipt Roll Users</h6>
                                    <h3 class="mb-0" id="receiptRollCustomers">-</h3>
                                    <small class="text-muted">Target customers</small>
                                </div>
                                <div class="stat-icon text-success">
                                    <i class="fas fa-receipt"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="stat-card warning">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-muted mb-2">Calls (30 days)</h6>
                                    <h3 class="mb-0" id="totalCalls">-</h3>
                                    <small class="text-muted"><span id="callSuccessRate">-</span>% success rate</small>
                                </div>
                                <div class="stat-icon text-warning">
                                    <i class="fas fa-phone"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="stat-card info">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="text-muted mb-2">Revenue (30 days)</h6>
                                    <h3 class="mb-0" id="totalRevenue">-</h3>
                                    <small class="text-muted"><span id="totalOrders">-</span> orders</small>
                                </div>
                                <div class="stat-icon text-info">
                                    <i class="fas fa-euro-sign"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Activities -->
                <div class="row">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Recent Activities</h5>
                            </div>
                            <div class="card-body">
                                <div id="recentActivities">
                                    <div class="loading">
                                        <i class="fas fa-spinner fa-spin"></i> Loading activities...
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0"><i class="fas fa-tasks me-2"></i>Quick Actions</h5>
                            </div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-primary" onclick="showSection('customers')">
                                        <i class="fas fa-user-plus me-2"></i>Add Customer
                                    </button>
                                    <button class="btn btn-outline-primary" onclick="showSection('calls')">
                                        <i class="fas fa-phone-plus me-2"></i>Log Call
                                    </button>
                                    <button class="btn btn-outline-primary" onclick="showSection('products')">
                                        <i class="fas fa-box me-2"></i>Manage Products
                                    </button>
                                    <button class="btn btn-outline-primary" onclick="downloadCustomerTemplate()">
                                        <i class="fas fa-download me-2"></i>Customer Template
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Customers Section -->
            <div id="customers-section" class="content-section" style="display: none;">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <h4>Customer Management</h4>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary me-2" onclick="showAddCustomerModal()">
                            <i class="fas fa-user-plus me-2"></i>Add Customer
                        </button>
                        <button class="btn btn-outline-primary" onclick="showUploadModal()">
                            <i class="fas fa-upload me-2"></i>Upload CSV
                        </button>
                    </div>
                </div>

                <!-- Customer Filters -->
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="customerSearch" placeholder="Search customers...">
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="statusFilter">
                                    <option value="all">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="inactive">Inactive</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <select class="form-select" id="receiptRollFilter">
                                    <option value="all">All Customers</option>
                                    <option value="true">Receipt Roll Users</option>
                                    <option value="false">Others</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-primary me-2" onclick="loadCustomers()">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                                <button class="btn btn-outline-secondary" onclick="exportCustomers()">
                                    <i class="fas fa-download me-1"></i>Export
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Customers Table -->
                <div class="card">
                    <div class="card-body">
                        <div id="customersTable">
                            <div class="loading">
                                <i class="fas fa-spinner fa-spin"></i> Loading customers...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calls Section -->
            <div id="calls-section" class="content-section" style="display: none;">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <h4>Call Management</h4>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary" onclick="showAddCallModal()">
                            <i class="fas fa-phone-plus me-2"></i>Log Call
                        </button>
                    </div>
                </div>

                <!-- Call Filters -->
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <select class="form-select" id="callDirectionFilter">
                                    <option value="all">All Directions</option>
                                    <option value="inbound">Inbound</option>
                                    <option value="outbound">Outbound</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="callStatusFilter">
                                    <option value="all">All Status</option>
                                    <option value="completed">Completed</option>
                                    <option value="missed">Missed</option>
                                    <option value="busy">Busy</option>
                                    <option value="no-answer">No Answer</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <input type="date" class="form-control" id="callStartDate">
                            </div>
                            <div class="col-md-2">
                                <input type="date" class="form-control" id="callEndDate">
                            </div>
                            <div class="col-md-2">
                                <button class="btn btn-primary w-100" onclick="loadCalls()">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Call Statistics -->
                <div class="row mb-3">
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Total Calls</h6>
                                        <h4 class="mb-0" id="totalCallsCount">-</h4>
                                    </div>
                                    <i class="fas fa-phone fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Completed</h6>
                                        <h4 class="mb-0" id="completedCallsCount">-</h4>
                                    </div>
                                    <i class="fas fa-phone-check fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Follow-ups</h6>
                                        <h4 class="mb-0" id="followUpCallsCount">-</h4>
                                    </div>
                                    <i class="fas fa-calendar-check fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Avg Duration</h6>
                                        <h4 class="mb-0" id="avgCallDuration">-</h4>
                                    </div>
                                    <i class="fas fa-clock fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Calls Table -->
                <div class="card">
                    <div class="card-body">
                        <div id="callsTable">
                            <div class="loading">
                                <i class="fas fa-spinner fa-spin"></i> Loading calls...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- AI Agents Section -->
            <div id="agents-section" class="content-section" style="display: none;">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <h4><i class="fas fa-robot me-2"></i>AI Agent Management</h4>
                        <p class="text-muted">Create and manage AI agents with custom prompts and knowledge bases</p>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary" onclick="showCreateAgentModal()">
                            <i class="fas fa-plus me-2"></i>Create Agent
                        </button>
                    </div>
                </div>

                <!-- Agent Stats Cards -->
                <div class="row mb-4">
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h3 class="mb-0" id="totalAgentsCount">0</h3>
                                        <p class="mb-0">Total Agents</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-robot fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h3 class="mb-0" id="activeAgentsCount">0</h3>
                                        <p class="mb-0">Active Agents</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-check-circle fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h3 class="mb-0" id="totalKnowledgeCount">0</h3>
                                        <p class="mb-0">Knowledge Entries</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-brain fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h3 class="mb-0" id="testCallsCount">0</h3>
                                        <p class="mb-0">Test Calls</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-phone-alt fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Agents Table -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">AI Agents</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover" id="agentsTable">
                                <thead>
                                    <tr>
                                        <th>Agent</th>
                                        <th>Description</th>
                                        <th>Knowledge Base</th>
                                        <th>Voice Settings</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="agentsTableBody">
                                    <tr>
                                        <td colspan="6" class="text-center py-4">
                                            <div class="loading">
                                                <i class="fas fa-spinner fa-spin me-2"></i>Loading agents...
                                            </div>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Products Section -->
            <div id="products-section" class="content-section" style="display: none;">
                <div class="row mb-3">
                    <div class="col-md-8">
                        <h4>Product Management</h4>
                    </div>
                    <div class="col-md-4 text-end">
                        <button class="btn btn-primary" onclick="showAddProductModal()">
                            <i class="fas fa-plus me-2"></i>Add Product
                        </button>
                    </div>
                </div>

                <!-- Product Filters -->
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <input type="text" class="form-control" id="productSearch" placeholder="Search products by name, description, or SKU...">
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="activeFilter">
                                    <option value="all">All Products</option>
                                    <option value="true">Active Only</option>
                                    <option value="false">Inactive</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-primary me-2" onclick="loadProducts()">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                                <button class="btn btn-outline-warning" onclick="loadLowStockProducts()">
                                    <i class="fas fa-exclamation-triangle me-1"></i>Low Stock
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Product Statistics -->
                <div class="row mb-3">
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Total Products</h6>
                                        <h4 class="mb-0" id="totalProductsCount">-</h4>
                                    </div>
                                    <i class="fas fa-box fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Active Products</h6>
                                        <h4 class="mb-0" id="activeProductsCount">-</h4>
                                    </div>
                                    <i class="fas fa-check-circle fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Low Stock</h6>
                                        <h4 class="mb-0" id="lowStockProductsCount">-</h4>
                                    </div>
                                    <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Total Stock</h6>
                                        <h4 class="mb-0" id="totalStockCount">-</h4>
                                    </div>
                                    <i class="fas fa-warehouse fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Products Table -->
                <div class="card">
                    <div class="card-body">
                        <div id="productsTable">
                            <div class="loading">
                                <i class="fas fa-spinner fa-spin"></i> Loading products...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Orders Section -->
            <div id="orders-section" class="content-section" style="display: none;">
                <div class="row mb-3">
                    <div class="col-md-12">
                        <h4>Order Management</h4>
                        <p class="text-muted">Orders are automatically synced from Shopify</p>
                    </div>
                </div>

                <!-- Order Filters -->
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <select class="form-select" id="orderStatusFilter">
                                    <option value="all">All Status</option>
                                    <option value="pending">Pending</option>
                                    <option value="confirmed">Confirmed</option>
                                    <option value="processing">Processing</option>
                                    <option value="shipped">Shipped</option>
                                    <option value="delivered">Delivered</option>
                                    <option value="cancelled">Cancelled</option>
                                </select>
                            </div>
                            <div class="col-md-2">
                                <input type="date" class="form-control" id="orderStartDate">
                            </div>
                            <div class="col-md-2">
                                <input type="date" class="form-control" id="orderEndDate">
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-primary w-100" onclick="loadOrders()">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Order Statistics -->
                <div class="row mb-3">
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Total Orders</h6>
                                        <h4 class="mb-0" id="totalOrdersCount">-</h4>
                                    </div>
                                    <i class="fas fa-shopping-cart fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Pending</h6>
                                        <h4 class="mb-0" id="pendingOrdersCount">-</h4>
                                    </div>
                                    <i class="fas fa-clock fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Delivered</h6>
                                        <h4 class="mb-0" id="deliveredOrdersCount">-</h4>
                                    </div>
                                    <i class="fas fa-check-circle fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 mb-2">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">Revenue</h6>
                                        <h4 class="mb-0" id="totalRevenueMoney">-</h4>
                                    </div>
                                    <i class="fas fa-euro-sign fa-2x opacity-75"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Orders Table -->
                <div class="card">
                    <div class="card-body">
                        <div id="ordersTable">
                            <div class="loading">
                                <i class="fas fa-spinner fa-spin"></i> Loading orders...
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Analytics Section -->
            <div id="analytics-section" class="content-section" style="display: none;">
                <h4>Analytics & Reports</h4>
                <div class="row">
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">Sales Overview</div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-6">
                                        <div class="text-center">
                                            <h3 class="text-primary" id="analyticsRevenue">€0</h3>
                                            <p class="text-muted">Total Revenue</p>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-center">
                                            <h3 class="text-success" id="analyticsOrders">0</h3>
                                            <p class="text-muted">Total Orders</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">Customer Metrics</div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-6">
                                        <div class="text-center">
                                            <h3 class="text-info" id="analyticsCustomers">0</h3>
                                            <p class="text-muted">Total Customers</p>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="text-center">
                                            <h3 class="text-warning" id="analyticsCalls">0</h3>
                                            <p class="text-muted">Total Calls</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings Section -->
            <div id="settings-section" class="content-section" style="display: none;">
                <h4>Settings</h4>
                <div class="row">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-header">User Profile</div>
                            <div class="card-body">
                                <form id="userProfileForm">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">First Name</label>
                                                <input type="text" class="form-control" id="settingsFirstName" value="<%= user.first_name || '' %>">
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Last Name</label>
                                                <input type="text" class="form-control" id="settingsLastName" value="<%= user.last_name || '' %>">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Email</label>
                                        <input type="email" class="form-control" id="settingsEmail" value="<%= user.email || '' %>">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Username</label>
                                        <input type="text" class="form-control" id="settingsUsername" value="<%= user.username || '' %>" readonly>
                                        <small class="text-muted">Username cannot be changed</small>
                                    </div>
                                    <button type="button" class="btn btn-primary" onclick="updateProfile()">
                                        <i class="fas fa-save me-2"></i>Save Changes
                                    </button>
                                </form>
                            </div>
                        </div>
                        
                        <!-- Change Password Card -->
                        <div class="card mt-4">
                            <div class="card-header">Change Password</div>
                            <div class="card-body">
                                <form id="changePasswordForm">
                                    <div class="mb-3">
                                        <label class="form-label">New Password *</label>
                                        <input type="password" class="form-control" id="newPassword" required minlength="6">
                                        <small class="text-muted">Password must be at least 6 characters long</small>
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Confirm New Password *</label>
                                        <input type="password" class="form-control" id="confirmPassword" required minlength="6">
                                    </div>
                                    <button type="button" class="btn btn-warning" onclick="changePassword()">
                                        <i class="fas fa-key me-2"></i>Change Password
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="card">
                            <div class="card-header">Quick Actions</div>
                            <div class="card-body">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-outline-primary" onclick="downloadCustomerTemplate()">
                                        <i class="fas fa-download me-2"></i>Download Template
                                    </button>
                                    <button class="btn btn-outline-secondary" onclick="exportCustomers()">
                                        <i class="fas fa-file-export me-2"></i>Export Data
                                    </button>
                                    <button class="btn btn-outline-info" onclick="showSystemInfo()">
                                        <i class="fas fa-info-circle me-2"></i>System Info
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Customer Modal -->
    <div class="modal fade" id="addCustomerModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Customer</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addCustomerForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Company Name *</label>
                                    <input type="text" class="form-control" name="company_name" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Contact Person</label>
                                    <input type="text" class="form-control" name="contact_person">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" name="email">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Phone</label>
                                    <input type="tel" class="form-control" name="phone">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Mobile</label>
                                    <input type="tel" class="form-control" name="mobile">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">VAT Number</label>
                                    <input type="text" class="form-control" name="vat_number">
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="uses_receipt_rolls" id="usesReceiptRolls">
                                <label class="form-check-label" for="usesReceiptRolls">
                                    Uses Receipt Rolls
                                </label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="opt_out" id="optOut">
                                <label class="form-check-label" for="optOut">
                                    <span class="text-danger">Opt Out</span> - Customer cannot be contacted
                                </label>
                            </div>
                        </div>

                        <h6 class="mb-3">Invoice Address</h6>
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">Street</label>
                                    <input type="text" class="form-control" name="invoice_address_street">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Number</label>
                                    <input type="text" class="form-control" name="invoice_address_number">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Postal Code</label>
                                    <input type="text" class="form-control" name="invoice_address_postal_code">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">City</label>
                                    <input type="text" class="form-control" name="invoice_address_city">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Country</label>
                                    <input type="text" class="form-control" name="invoice_address_country" value="Belgium">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Invoice Language</label>
                                    <select class="form-control" name="invoice_language_code">
                                        <option value="FR">French (FR)</option>
                                        <option value="NL">Dutch (NL)</option>
                                        <option value="DE">German (DE)</option>
                                        <option value="EN">English (EN)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check mt-4">
                                        <input class="form-check-input" type="checkbox" name="invoice_language_confirmed" id="invoiceLanguageConfirmed">
                                        <label class="form-check-label" for="invoiceLanguageConfirmed">
                                            <i class="fas fa-check-circle text-success me-1"></i>Language Confirmed with Customer
                                        </label>
                                        <small class="form-text text-muted d-block">Check this if customer has confirmed their preferred language</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="delivery_same_as_invoice" id="deliverySameAsInvoice" checked>
                                <label class="form-check-label" for="deliverySameAsInvoice">
                                    Delivery address same as invoice address
                                </label>
                            </div>
                        </div>

                        <div id="deliveryAddressSection" style="display: none;">
                            <h6 class="mb-3">Delivery Address</h6>
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="mb-3">
                                        <label class="form-label">Street</label>
                                        <input type="text" class="form-control" name="delivery_address_street">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Number</label>
                                        <input type="text" class="form-control" name="delivery_address_number">
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Postal Code</label>
                                        <input type="text" class="form-control" name="delivery_address_postal_code">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">City</label>
                                        <input type="text" class="form-control" name="delivery_address_city">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Country</label>
                                        <input type="text" class="form-control" name="delivery_address_country" value="Belgium">
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" name="notes" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveCustomer()">
                        <i class="fas fa-save me-2"></i>Save Customer
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Customer Modal -->
    <div class="modal fade" id="editCustomerModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Customer</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editCustomerForm">
                        <input type="hidden" id="editCustomerId" name="customer_id">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Company Name *</label>
                                    <input type="text" class="form-control" name="company_name" id="editCompanyName" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Contact Person</label>
                                    <input type="text" class="form-control" name="contact_person" id="editContactPerson">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Email</label>
                                    <input type="email" class="form-control" name="email" id="editEmail">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Phone</label>
                                    <input type="tel" class="form-control" name="phone" id="editPhone">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Mobile</label>
                                    <input type="tel" class="form-control" name="mobile" id="editMobile">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">VAT Number</label>
                                    <input type="text" class="form-control" name="vat_number" id="editVatNumber">
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="uses_receipt_rolls" id="editUsesReceiptRolls">
                                <label class="form-check-label" for="editUsesReceiptRolls">
                                    Uses Receipt Rolls
                                </label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="opt_out" id="editOptOut">
                                <label class="form-check-label" for="editOptOut">
                                    <span class="text-danger">Opt Out</span> - Customer cannot be contacted
                                </label>
                            </div>
                        </div>

                        <h6 class="mb-3">Invoice Address</h6>
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label class="form-label">Street</label>
                                    <input type="text" class="form-control" name="invoice_address_street" id="editInvoiceStreet">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Number</label>
                                    <input type="text" class="form-control" name="invoice_address_number" id="editInvoiceNumber">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Postal Code</label>
                                    <input type="text" class="form-control" name="invoice_address_postal_code" id="editInvoicePostalCode">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">City</label>
                                    <input type="text" class="form-control" name="invoice_address_city" id="editInvoiceCity">
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Country</label>
                                    <input type="text" class="form-control" name="invoice_address_country" id="editInvoiceCountry">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Invoice Language</label>
                                    <select class="form-control" name="invoice_language_code" id="editInvoiceLanguageCode">
                                        <option value="FR">French (FR)</option>
                                        <option value="NL">Dutch (NL)</option>
                                        <option value="DE">German (DE)</option>
                                        <option value="EN">English (EN)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check mt-4">
                                        <input class="form-check-input" type="checkbox" name="invoice_language_confirmed" id="editInvoiceLanguageConfirmed">
                                        <label class="form-check-label" for="editInvoiceLanguageConfirmed">
                                            <i class="fas fa-check-circle text-success me-1"></i>Language Confirmed with Customer
                                        </label>
                                        <small class="form-text text-muted d-block">Check this if customer has confirmed their preferred language</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Notes</label>
                            <textarea class="form-control" name="notes" id="editNotes" rows="3"></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" name="status" id="editStatus">
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updateCustomer()">
                        <i class="fas fa-save me-2"></i>Update Customer
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add Call Modal -->
    <div class="modal fade" id="addCallModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Log New Call</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addCallForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Customer</label>
                                    <select class="form-select" name="customer_id" id="callCustomer">
                                        <option value="">Select Customer (Optional)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Phone Number *</label>
                                    <input type="tel" class="form-control" name="phone_number" required>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Direction *</label>
                                    <select class="form-select" name="direction" required>
                                        <option value="">Select Direction</option>
                                        <option value="inbound">Inbound</option>
                                        <option value="outbound">Outbound</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Status *</label>
                                    <select class="form-select" name="status" required>
                                        <option value="">Select Status</option>
                                        <option value="completed">Completed</option>
                                        <option value="missed">Missed</option>
                                        <option value="busy">Busy</option>
                                        <option value="no-answer">No Answer</option>
                                        <option value="voicemail">Voicemail</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Duration (seconds)</label>
                                    <input type="number" class="form-control" name="duration" min="0">
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Sentiment</label>
                                    <select class="form-select" name="sentiment">
                                        <option value="">Select Sentiment</option>
                                        <option value="positive">Positive</option>
                                        <option value="neutral">Neutral</option>
                                        <option value="negative">Negative</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Recording URL</label>
                                    <input type="url" class="form-control" name="recording_url">
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="follow_up_required" id="followUpRequired">
                                <label class="form-check-label" for="followUpRequired">
                                    Follow-up required
                                </label>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">AI Summary / Notes</label>
                            <textarea class="form-control" name="ai_summary" rows="4" placeholder="Enter call summary or notes..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveCall()">
                        <i class="fas fa-save me-2"></i>Save Call
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Add/Edit Product Modal -->
    <div class="modal fade" id="productModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalTitle">Add New Product</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="productForm">
                        <input type="hidden" id="productId" name="product_id">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Product Name *</label>
                                    <input type="text" class="form-control" name="name" id="productName" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">SKU *</label>
                                    <input type="text" class="form-control" name="sku" id="productSku" required placeholder="e.g. RR-80-40-12">
                                    <small class="form-text text-muted">Unique identifier for Shopify integration</small>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" name="description" id="productDescription" rows="3"></textarea>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Price (€)</label>
                                    <input type="number" class="form-control" name="price" id="productPrice" step="0.01" min="0" readonly>
                                    <small class="form-text text-muted">Automatically synchronized from Shopify</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Stock Quantity</label>
                                    <input type="number" class="form-control" name="stock_quantity" id="productStock" min="0" readonly>
                                    <small class="form-text text-muted">Automatically synchronized from Shopify</small>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="is_active" id="productActive" checked>
                                <label class="form-check-label" for="productActive">
                                    Active Product
                                </label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveProductBtn" onclick="saveProduct()">
                        <i class="fas fa-save me-2"></i>Save Product
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Upload CSV Modal -->
    <div class="modal fade" id="uploadModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Upload Customer CSV</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">CSV File (European format - semicolon separated)</label>
                        <input type="file" class="form-control" id="customerCsvFile" accept=".csv">
                        <div class="form-text">
                            Download the template to see the required format.
                        </div>
                    </div>
                    <div class="mb-3">
                        <button class="btn btn-outline-secondary btn-sm" onclick="downloadCustomerTemplate()">
                            <i class="fas fa-download me-2"></i>Download Template
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="uploadCSV()">
                        <i class="fas fa-upload me-2"></i>Upload
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delivery Addresses Modal -->
    <div class="modal fade" id="deliveryAddressesModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delivery Addresses</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div>
                            <h6 id="deliveryCustomerName" class="mb-0"></h6>
                            <small class="text-muted">Manage delivery addresses for this customer</small>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-outline-secondary" onclick="downloadDeliveryAddressTemplate()">
                                <i class="fas fa-download me-2"></i>Template
                            </button>
                            <button class="btn btn-outline-primary" onclick="showDeliveryAddressUploadModal()">
                                <i class="fas fa-upload me-2"></i>Import CSV
                            </button>
                            <button class="btn btn-outline-info" onclick="exportDeliveryAddresses()">
                                <i class="fas fa-file-export me-2"></i>Export CSV
                            </button>
                            <button class="btn btn-success" onclick="showAddDeliveryAddressForm()">
                                <i class="fas fa-plus me-2"></i>Add Address
                            </button>
                        </div>
                    </div>
                    
                    <div id="deliveryAddressesList">
                        <!-- Delivery addresses will be loaded here -->
                    </div>
                    
                    <!-- Add/Edit Delivery Address Form -->
                    <div id="deliveryAddressForm" style="display: none;">
                        <hr>
                        <h6 id="deliveryFormTitle">Add New Delivery Address</h6>
                        <form id="deliveryAddressFormData">
                            <input type="hidden" id="deliveryAddressId" name="address_id">
                            <input type="hidden" id="deliveryCustomerId" name="customer_id">
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Address Name *</label>
                                        <input type="text" class="form-control" id="deliveryAddressName" name="address_name" required>
                                        <small class="form-text text-muted">e.g., "Main Warehouse", "Store Branch 1"</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Contact Person</label>
                                        <input type="text" class="form-control" id="deliveryContactPerson" name="contact_person">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="mb-3">
                                        <label class="form-label">Street</label>
                                        <input type="text" class="form-control" id="deliveryStreet" name="street">
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="mb-3">
                                        <label class="form-label">Number</label>
                                        <input type="text" class="form-control" id="deliveryNumber" name="number">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">City</label>
                                        <input type="text" class="form-control" id="deliveryCity" name="city">
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Postal Code</label>
                                        <input type="text" class="form-control" id="deliveryPostalCode" name="postal_code">
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <label class="form-label">Country</label>
                                        <input type="text" class="form-control" id="deliveryCountry" name="country" value="Belgium">
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Delivery Language</label>
                                        <select class="form-control" id="deliveryLanguageCode" name="language_code">
                                            <option value="FR">French (FR)</option>
                                            <option value="NL">Dutch (NL)</option>
                                            <option value="DE">German (DE)</option>
                                            <option value="EN">English (EN)</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <div class="form-check mt-4">
                                            <input class="form-check-input" type="checkbox" id="deliveryLanguageConfirmed" name="language_confirmed">
                                            <label class="form-check-label" for="deliveryLanguageConfirmed">
                                                <i class="fas fa-check-circle text-success me-1"></i>Language Confirmed with Customer
                                            </label>
                                            <small class="form-text text-muted d-block">Check this if customer has confirmed their preferred language</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Contact Phone</label>
                                        <input type="tel" class="form-control" id="deliveryContactPhone" name="contact_phone">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Contact Email</label>
                                        <input type="email" class="form-control" id="deliveryContactEmail" name="contact_email">
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Notes</label>
                                <textarea class="form-control" id="deliveryNotes" name="notes" rows="2"></textarea>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" id="deliveryIsPrimary" name="is_primary">
                                        <label class="form-check-label" for="deliveryIsPrimary">
                                            Primary Delivery Address
                                        </label>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" id="deliveryCanPlaceOrders" name="can_place_orders">
                                        <label class="form-check-label" for="deliveryCanPlaceOrders">
                                            <strong>Can Place Orders Independently</strong>
                                        </label>
                                        <small class="form-text text-muted d-block">If unchecked, orders must be placed centrally by main contact</small>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-secondary" onclick="hideDeliveryAddressForm()">Cancel</button>
                                <button type="button" class="btn btn-success" onclick="saveDeliveryAddress()">
                                    <i class="fas fa-save me-2"></i>Save Address
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Delivery Address CSV Upload Modal -->
    <div class="modal fade" id="deliveryAddressUploadModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Import Delivery Addresses from CSV</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="deliveryAddressUploadForm" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label class="form-label">Select CSV File</label>
                            <input type="file" class="form-control" id="deliveryAddressCsvFile" name="csvFile" accept=".csv" required>
                            <small class="form-text text-muted">
                                File must be in CSV format with semicolon (;) separators
                            </small>
                        </div>
                        
                        <div class="alert alert-info">
                            <h6><i class="fas fa-info-circle me-2"></i>Required CSV Columns:</h6>
                            <ul class="mb-0">
                                <li><strong>customer_company_name</strong> - Must match existing customer</li>
                                <li><strong>address_name</strong> - Unique name for the delivery address</li>
                                <li><strong>street, number, city, postal_code, country</strong> - Address details</li>
                                <li><strong>language_code</strong> - FR/NL/DE/EN (default: FR)</li>
                                <li><strong>language_confirmed</strong> - true/false (language confirmed with customer)</li>
                                <li><strong>is_primary</strong> - true/false (only one primary per customer)</li>
                                <li><strong>can_place_orders</strong> - true/false (independent ordering permission)</li>
                                <li><strong>contact_person, contact_phone, contact_email, notes</strong> - Optional</li>
                            </ul>
                        </div>
                        
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-outline-primary" onclick="downloadDeliveryAddressTemplate()">
                                <i class="fas fa-download me-2"></i>Download Template
                            </button>
                            <div>
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="uploadDeliveryAddressCSV()">
                                    <i class="fas fa-upload me-2"></i>Import
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Create/Edit Agent Modal -->
    <div class="modal fade" id="agentModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="agentModalTitle">Create New Agent</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="agentForm">
                        <input type="hidden" id="agentId" name="id">
                        
                        <!-- Basic Information -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3"><i class="fas fa-info-circle me-2"></i>Basic Information</h6>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Agent Name *</label>
                                    <input type="text" class="form-control" id="agentName" name="name" required>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Voice Model</label>
                                    <select class="form-select" id="voiceModel" name="voice">
                                        <option value="alloy">Alloy (Neutral)</option>
                                        <option value="echo">Echo (Male)</option>
                                        <option value="fable">Fable (British)</option>
                                        <option value="onyx">Onyx (Deep)</option>
                                        <option value="nova">Nova (Female)</option>
                                        <option value="shimmer">Shimmer (Soft)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-12">
                                <div class="mb-3">
                                    <label class="form-label">Description</label>
                                    <textarea class="form-control" id="agentDescription" name="description" rows="2" placeholder="Brief description of what this agent does..."></textarea>
                                </div>
                            </div>
                        </div>

                        <!-- Voice Settings -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3"><i class="fas fa-volume-up me-2"></i>Voice Settings</h6>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label class="form-label">Speed</label>
                                    <input type="range" class="form-range" id="voiceSpeed" name="speed" min="0.5" max="2.0" step="0.1" value="1.0">
                                    <div class="text-center small text-muted">
                                        <span id="voiceSpeedValue">1.0x</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Voice Language</label>
                                    <select class="form-select" id="voiceLanguage" name="language">
                                        <option value="en">English</option>
                                        <option value="fr">French</option>
                                        <option value="nl">Dutch</option>
                                        <option value="de">German</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3">
                                    <label class="form-label">Supported Language *</label>
                                    <select class="form-select" id="supportedLanguage" name="supported_language" required>
                                        <option value="en">English</option>
                                        <option value="fr">French (Français)</option>
                                        <option value="nl">Dutch (Nederlands)</option>
                                        <option value="de">German (Deutsch)</option>
                                        <option value="es">Spanish (Español)</option>
                                        <option value="it">Italian (Italiano)</option>
                                    </select>
                                    <small class="form-text text-muted">
                                        Language this agent can communicate in
                                    </small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="mb-3 d-flex align-items-end">
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="testVoice()">
                                        <i class="fas fa-play me-2"></i>Test Voice
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- System Prompt -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3"><i class="fas fa-brain me-2"></i>AI Instructions</h6>
                                <div class="mb-3">
                                    <label class="form-label">System Prompt *</label>
                                    <textarea class="form-control" id="systemPrompt" name="system_prompt" rows="6" required placeholder="You are a professional assistant for..."></textarea>
                                    <small class="form-text text-muted">
                                        Define how the AI agent should behave, what it knows, and how it should respond to customers.
                                    </small>
                                </div>
                            </div>
                        </div>

                        <!-- Knowledge Base -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <h6 class="border-bottom pb-2 mb-3"><i class="fas fa-database me-2"></i>Knowledge Base</h6>
                                <div id="knowledgeEntries">
                                    <!-- Knowledge entries will be loaded here -->
                                </div>
                                <button type="button" class="btn btn-outline-success btn-sm" onclick="addKnowledgeEntry()">
                                    <i class="fas fa-plus me-2"></i>Add Knowledge Entry
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveAgent()">
                        <i class="fas fa-save me-2"></i>Save Agent
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Test Agent Modal -->
    <div class="modal fade" id="testAgentModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Test Agent: <span id="testAgentName"></span></h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="testAgentForm">
                        <input type="hidden" id="testAgentId">
                        
                        <!-- Test Mode Selection -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="btn-group w-100" role="group">
                                    <input type="radio" class="btn-check" name="testMode" id="voiceTestMode" value="voice" checked>
                                    <label class="btn btn-outline-primary" for="voiceTestMode">
                                        <i class="fas fa-microphone me-2"></i>Voice Test (Browser)
                                    </label>
                                    
                                    <input type="radio" class="btn-check" name="testMode" id="phoneTestMode" value="phone">
                                    <label class="btn btn-outline-primary" for="phoneTestMode">
                                        <i class="fas fa-phone me-2"></i>Real Phone Test
                                    </label>
                                </div>
                            </div>
                        </div>

                        <!-- Phone Test Section -->
                        <div id="phoneTestSection" class="row" style="display: none;">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Phone Number *</label>
                                    <input type="tel" class="form-control" id="testPhoneNumber" placeholder="+32 2 123 45 67">
                                    <small class="form-text text-muted">Phone number to call for testing</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Test Scenario</label>
                                    <select class="form-select" id="testScenario">
                                        <option value="standard">Standard Conversation</option>
                                        <option value="product_inquiry">Product Inquiry</option>
                                        <option value="order_placement">Order Placement</option>
                                        <option value="complaint_handling">Complaint Handling</option>
                                        <option value="pricing_question">Pricing Question</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Voice Test Section -->
                        <div id="voiceTestSection" class="row">
                            <div class="col-12">
                                <div class="mb-3">
                                    <label class="form-label">Test Scenario</label>
                                    <select class="form-select" id="voiceTestScenario">
                                        <option value="standard">Standard Conversation</option>
                                        <option value="product_inquiry">Product Inquiry</option>
                                        <option value="order_placement">Order Placement</option>
                                        <option value="complaint_handling">Complaint Handling</option>
                                        <option value="pricing_question">Pricing Question</option>
                                    </select>
                                </div>
                                
                                <!-- Voice Test Interface -->
                                <div class="card border-primary">
                                    <div class="card-header bg-primary text-white">
                                        <h6 class="mb-0"><i class="fas fa-headset me-2"></i>Voice Conversation Test</h6>
                                    </div>
                                    <div class="card-body">
                                        <div id="voiceTestControls">
                                            <div class="text-center mb-3">
                                                <button type="button" id="startVoiceTest" class="btn btn-success btn-lg">
                                                    <i class="fas fa-play me-2"></i>Start Voice Test
                                                </button>
                                                <button type="button" id="endVoiceTest" class="btn btn-danger btn-lg" style="display: none;">
                                                    <i class="fas fa-stop me-2"></i>End Test
                                                </button>
                                            </div>
                                            
                                            <div id="voiceTestStatus" class="alert alert-info" style="display: none;">
                                                <div class="d-flex align-items-center">
                                                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                                    <span id="voiceStatusText">Initializing...</span>
                                                </div>
                                            </div>
                                            
                                            <!-- Language Verification Interface -->
                                            <div id="languageVerification" class="alert alert-warning" style="display: none;">
                                                <h6><i class="fas fa-globe me-2"></i>Language Verification</h6>
                                                <div id="languageVerificationContent">
                                                    <p class="mb-2"><strong>Detected Language:</strong> <span id="detectedLanguage">-</span></p>
                                                    <p class="mb-2"><strong>Customer Language:</strong> <span id="customerLanguage">-</span></p>
                                                    <div id="languageSwitch" style="display: none;">
                                                        <p class="mb-2 text-warning">Would you like to switch to an agent that speaks <span id="suggestedLanguage">-</span>?</p>
                                                        <div class="btn-group">
                                                            <button type="button" id="confirmLanguageSwitchBtn" class="btn btn-sm btn-success">
                                                                <i class="fas fa-check me-1"></i>Yes, Switch Agent
                                                            </button>
                                                            <button type="button" id="keepCurrentAgentBtn" class="btn btn-sm btn-secondary">
                                                                <i class="fas fa-times me-1"></i>Keep Current Agent
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Automatic Turn-Taking Status -->
                                            <div id="voiceControls" class="text-center" style="display: none;">
                                                <div class="mb-3">
                                                    <div id="voiceActivityIndicator" class="voice-activity-indicator">
                                                        <div class="activity-bars">
                                                            <div class="bar"></div>
                                                            <div class="bar"></div>
                                                            <div class="bar"></div>
                                                            <div class="bar"></div>
                                                        </div>
                                                        <span id="turnStatus" class="ms-2">Listening...</span>
                                                    </div>
                                                </div>
                                                <div class="alert alert-info small">
                                                    <i class="fas fa-info-circle me-1"></i>
                                                    Using automatic turn-taking - just speak naturally! 
                                                    Conversation ends after 30 seconds of silence.
                                                </div>
                                            </div>
                                            
                                            <div id="conversationLog" class="mt-3" style="display: none;">
                                                <h6>Conversation:</h6>
                                                <div id="conversationMessages" class="border rounded p-2" style="height: 200px; overflow-y: auto; background-color: #f8f9fa;">
                                                    <!-- Messages will appear here -->
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                            <div class="col-12">
                                <div class="alert alert-info">
                                    <h6><i class="fas fa-info-circle me-2"></i>Advanced AI Call Features</h6>
                                    <ul class="mb-0">
                                        <li><strong>Real Phone Call:</strong> Initiates actual call using Telnyx integration</li>
                                        <li><strong>AI Agent Voice:</strong> Uses agent's custom voice and conversation settings</li>
                                        <li><strong>LiveKit Integration:</strong> Real-time audio streaming for natural conversations</li>
                                        <li><strong>Dynamic Knowledge:</strong> Agent accesses knowledge base during conversation</li>
                                        <li><strong>Call Analytics:</strong> Full conversation tracking and performance metrics</li>
                                    </ul>
                                </div>
                                
                                <!-- LiveKit Status -->
                                <div id="livekitStatus" class="alert alert-warning" style="display: none;">
                                    <h6><i class="fas fa-broadcast-tower me-2"></i>LiveKit Session Status</h6>
                                    <div id="livekitDetails">
                                        <p class="mb-1"><strong>Room:</strong> <span id="livekitRoom">-</span></p>
                                        <p class="mb-1"><strong>Agent:</strong> <span id="livekitAgent">-</span></p>
                                        <p class="mb-0"><strong>Status:</strong> <span id="livekitSessionStatus">Connecting...</span></p>
                                    </div>
                                </div>
                                
                                <!-- OpenAI Realtime Status -->
                                <div id="openaiStatus" class="alert alert-info" style="display: none;">
                                    <h6><i class="fas fa-brain me-2"></i>OpenAI Realtime Session</h6>
                                    <div id="openaiDetails">
                                        <p class="mb-1"><strong>Session ID:</strong> <span id="openaiSessionId">-</span></p>
                                        <p class="mb-1"><strong>AI Model:</strong> <span id="openaiModel">GPT-4o Realtime</span></p>
                                        <p class="mb-1"><strong>Messages:</strong> <span id="openaiMessageCount">0</span></p>
                                        <p class="mb-0"><strong>Status:</strong> <span id="openaiSessionStatus">Connecting...</span></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>

            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentSection = 'overview';
        let currentPage = 1;
        const itemsPerPage = 10;

        // Authentication helper
        function getAuthHeader() {
            const token = localStorage.getItem('auth_token');
            return token ? { 'Authorization': `Bearer ${token}` } : {};
        }

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            // Check authentication
            const token = localStorage.getItem('auth_token');
            if (!token) {
                window.location.href = '/login';
                return;
            }

            // Load initial data
            loadDashboardStats();
            loadRecentActivities();
            
            // Setup event listeners
            setupEventListeners();
        });

        function setupEventListeners() {
            // Navigation
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const section = this.dataset.section;
                    showSection(section);
                });
            });

            // Customer search
            const searchInput = document.getElementById('customerSearch');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(loadCustomers, 500));
            }

            // Delivery address toggle
            const deliveryCheckbox = document.getElementById('deliverySameAsInvoice');
            if (deliveryCheckbox) {
                deliveryCheckbox.addEventListener('change', function() {
                    const section = document.getElementById('deliveryAddressSection');
                    section.style.display = this.checked ? 'none' : 'block';
                });
            }
        }

        // Load dashboard statistics
        async function loadDashboardStats() {
            try {
                const response = await fetch('/api/dashboard/stats', {
                    headers: getAuthHeader()
                });
                
                if (!response.ok) throw new Error('Failed to load stats');
                
                const result = await response.json();
                const stats = result.data.overview;
                
                // Update stat cards
                document.getElementById('totalCustomers').textContent = stats.totalCustomers;
                document.getElementById('receiptRollCustomers').textContent = stats.receiptRollCustomers;
                document.getElementById('totalCalls').textContent = stats.totalCalls;
                document.getElementById('callSuccessRate').textContent = stats.callSuccessRate;
                document.getElementById('totalRevenue').textContent = `€${stats.totalRevenue.toFixed(2)}`;
                document.getElementById('totalOrders').textContent = stats.totalOrders;
                
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
                showAlert('Failed to load dashboard statistics', 'danger');
            }
        }

        // Load recent activities
        async function loadRecentActivities() {
            try {
                const response = await fetch('/api/dashboard/stats', {
                    headers: getAuthHeader()
                });
                
                if (!response.ok) throw new Error('Failed to load activities');
                
                const result = await response.json();
                const activities = result.data.recentActivities;
                
                const activitiesContainer = document.getElementById('recentActivities');
                if (activities.length === 0) {
                    activitiesContainer.innerHTML = '<p class="text-muted">No recent activities</p>';
                    return;
                }

                const activitiesHtml = activities.map(activity => {
                    const icon = activity.type === 'call' ? 'fa-phone' : 'fa-shopping-cart';
                    const color = activity.status === 'completed' ? 'success' : 
                                 activity.status === 'pending' ? 'warning' : 'info';
                    
                    return `
                        <div class="d-flex align-items-center mb-3">
                            <div class="me-3">
                                <i class="fas ${icon} text-${color}"></i>
                            </div>
                            <div class="flex-grow-1">
                                <h6 class="mb-1">${activity.title || 'Unknown'}</h6>
                                <small class="text-muted">
                                    ${activity.type === 'call' ? 'Call' : 'Order'} - 
                                    ${new Date(activity.created_at).toLocaleDateString()}
                                </small>
                            </div>
                            <span class="badge bg-${color}">${activity.status}</span>
                        </div>
                    `;
                }).join('');

                activitiesContainer.innerHTML = activitiesHtml;
                
            } catch (error) {
                console.error('Error loading recent activities:', error);
                document.getElementById('recentActivities').innerHTML = 
                    '<p class="text-muted">Failed to load activities</p>';
            }
        }

        // Show specific section
        function showSection(section) {
            // Hide all sections
            document.querySelectorAll('.content-section').forEach(sec => {
                sec.style.display = 'none';
            });

            // Show selected section
            document.getElementById(`${section}-section`).style.display = 'block';

            // Update navigation
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
            });
            document.querySelector(`[data-section="${section}"]`).classList.add('active');

            // Update page title
            const titles = {
                overview: 'Dashboard Overview',
                customers: 'Customer Management',
                calls: 'Call Management',
                agents: 'AI Agent Management',
                products: 'Product Management',
                orders: 'Order Management',
                analytics: 'Analytics & Reports',
                settings: 'Settings'
            };
            document.getElementById('pageTitle').textContent = titles[section] || 'Dashboard';

            currentSection = section;

            // Load section-specific data
            if (section === 'customers') {
                loadCustomers();
            } else if (section === 'calls') {
                loadCalls();
                loadCallStats();
            } else if (section === 'agents') {
                loadAgents();
                loadAgentStats();
            } else if (section === 'products') {
                loadProducts();
                loadProductStats();
            } else if (section === 'orders') {
                loadOrders();
                loadOrderStats();
            } else if (section === 'analytics') {
                loadAnalytics();
            }
        }

        // Load customers
        async function loadCustomers() {
            try {
                const searchTerm = document.getElementById('customerSearch')?.value || '';
                const statusFilter = document.getElementById('statusFilter')?.value || 'all';
                const receiptRollFilter = document.getElementById('receiptRollFilter')?.value || 'all';

                const params = new URLSearchParams({
                    page: currentPage,
                    limit: itemsPerPage,
                    search: searchTerm,
                    status: statusFilter,
                    uses_receipt_rolls: receiptRollFilter
                });

                const response = await fetch(`/api/customers?${params}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load customers');

                const result = await response.json();
                displayCustomers(result.data);

            } catch (error) {
                console.error('Error loading customers:', error);
                showAlert('Failed to load customers', 'danger');
            }
        }

        // Display customers table
        function displayCustomers(data) {
            const container = document.getElementById('customersTable');
            
            if (data.customers.length === 0) {
                container.innerHTML = '<p class="text-muted">No customers found</p>';
                return;
            }

            const tableHtml = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Company</th>
                                <th>Contact</th>
                                <th>Phone</th>
                                <th>Receipt Rolls</th>
                                <th>Opt Out</th>
                                <th>City</th>
                                <th>Language</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${data.customers.map(customer => `
                                <tr>
                                    <td>
                                        <strong>${customer.company_name}</strong>
                                        ${customer.vat_number ? `<br><small class="text-muted">${customer.vat_number}</small>` : ''}
                                    </td>
                                    <td>
                                        ${customer.contact_person || '-'}
                                        ${customer.email ? `<br><small class="text-muted">${customer.email}</small>` : ''}
                                    </td>
                                    <td>
                                        ${customer.phone || '-'}
                                        ${customer.mobile ? `<br><small class="text-muted">${customer.mobile}</small>` : ''}
                                    </td>
                                    <td>
                                        <span class="badge ${customer.uses_receipt_rolls ? 'bg-success' : 'bg-secondary'}">
                                            ${customer.uses_receipt_rolls ? 'Yes' : 'No'}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge ${customer.opt_out ? 'bg-danger' : 'bg-success'}">
                                            ${customer.opt_out ? 'Yes' : 'No'}
                                        </span>
                                    </td>
                                    <td>${customer.invoice_address_city || '-'}</td>
                                    <td>
                                        <span class="badge ${customer.invoice_language_confirmed ? 'bg-success' : 'bg-warning'}">
                                            <i class="fas fa-language me-1"></i>${customer.invoice_language_code || 'FR'}${customer.invoice_language_confirmed ? ' ✓' : ' ?'}
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge ${customer.status === 'active' ? 'bg-success' : 'bg-secondary'}">
                                            ${customer.status}
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-info" onclick="manageDeliveryAddresses(${customer.id}, '${customer.company_name}')" title="Delivery Addresses">
                                                <i class="fas fa-map-marker-alt"></i>
                                            </button>
                                            <button class="btn btn-outline-primary" onclick="editCustomer(${customer.id})" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" onclick="deleteCustomer(${customer.id})" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
                
                ${data.pagination.totalPages > 1 ? `
                    <nav aria-label="Customer pagination">
                        <ul class="pagination justify-content-center">
                            <li class="page-item ${!data.pagination.hasPrev ? 'disabled' : ''}">
                                <a class="page-link" href="#" onclick="changePage(${data.pagination.currentPage - 1})">Previous</a>
                            </li>
                            ${Array.from({ length: data.pagination.totalPages }, (_, i) => i + 1)
                                .map(page => `
                                    <li class="page-item ${page === data.pagination.currentPage ? 'active' : ''}">
                                        <a class="page-link" href="#" onclick="changePage(${page})">${page}</a>
                                    </li>
                                `).join('')}
                            <li class="page-item ${!data.pagination.hasNext ? 'disabled' : ''}">
                                <a class="page-link" href="#" onclick="changePage(${data.pagination.currentPage + 1})">Next</a>
                            </li>
                        </ul>
                    </nav>
                ` : ''}
            `;

            container.innerHTML = tableHtml;
        }

        // Modal functions
        function showAddCustomerModal() {
            const modal = new bootstrap.Modal(document.getElementById('addCustomerModal'));
            modal.show();
        }

        function showUploadModal() {
            const modal = new bootstrap.Modal(document.getElementById('uploadModal'));
            modal.show();
        }

        // Save customer
        async function saveCustomer() {
            try {
                const form = document.getElementById('addCustomerForm');
                const formData = new FormData(form);
                
                const customerData = {
                    company_name: formData.get('company_name'),
                    contact_person: formData.get('contact_person'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    mobile: formData.get('mobile'),
                    vat_number: formData.get('vat_number'),
                    uses_receipt_rolls: formData.has('uses_receipt_rolls'),
                    opt_out: formData.has('opt_out'),
                    invoice_address_street: formData.get('invoice_address_street'),
                    invoice_address_number: formData.get('invoice_address_number'),
                    invoice_address_city: formData.get('invoice_address_city'),
                    invoice_address_postal_code: formData.get('invoice_address_postal_code'),
                    invoice_address_country: formData.get('invoice_address_country'),
                    invoice_language_code: formData.get('invoice_language_code'),
                    invoice_language_confirmed: formData.has('invoice_language_confirmed'),
                    delivery_same_as_invoice: formData.has('delivery_same_as_invoice'),
                    notes: formData.get('notes')
                };

                // Add delivery address if different
                if (!customerData.delivery_same_as_invoice) {
                    customerData.delivery_addresses = [{
                        street: formData.get('delivery_address_street'),
                        number: formData.get('delivery_address_number'),
                        city: formData.get('delivery_address_city'),
                        postal_code: formData.get('delivery_address_postal_code'),
                        country: formData.get('delivery_address_country')
                    }];
                }

                const response = await fetch('/api/customers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify(customerData)
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('Customer created successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addCustomerModal')).hide();
                    form.reset();
                    loadCustomers();
                } else {
                    showAlert(result.error || 'Failed to create customer', 'danger');
                }

            } catch (error) {
                console.error('Error saving customer:', error);
                showAlert('Failed to save customer', 'danger');
            }
        }

        // Download customer template
        function downloadCustomerTemplate() {
            const link = document.createElement('a');
            link.href = '/api/customers/download/template';
            link.download = 'customers_template.csv';
            link.click();
        }

        // Upload CSV
        async function uploadCSV() {
            try {
                const fileInput = document.getElementById('customerCsvFile');
                const file = fileInput.files[0];

                if (!file) {
                    showAlert('Please select a CSV file', 'warning');
                    return;
                }

                const formData = new FormData();
                formData.append('csvFile', file);

                const response = await fetch('/api/customers/upload/csv', {
                    method: 'POST',
                    headers: getAuthHeader(),
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('uploadModal')).hide();
                    loadCustomers();
                } else {
                    showAlert(result.error || 'Upload failed', 'danger');
                }

            } catch (error) {
                console.error('Error uploading CSV:', error);
                showAlert('Failed to upload CSV file', 'danger');
            }
        }

        // Export customers
        function exportCustomers() {
            const link = document.createElement('a');
            link.href = '/api/customers/export/csv';
            link.download = `customers_export_${new Date().toISOString().split('T')[0]}.csv`;
            link.click();
        }

        // Edit customer
        async function editCustomer(id) {
            try {
                // Fetch customer data
                const response = await fetch(`/api/customers/${id}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load customer');

                const result = await response.json();
                const customer = result.data;

                // Populate form with customer data
                document.getElementById('editCustomerId').value = customer.id;
                document.getElementById('editCompanyName').value = customer.company_name || '';
                document.getElementById('editContactPerson').value = customer.contact_person || '';
                document.getElementById('editEmail').value = customer.email || '';
                document.getElementById('editPhone').value = customer.phone || '';
                document.getElementById('editMobile').value = customer.mobile || '';
                document.getElementById('editVatNumber').value = customer.vat_number || '';
                document.getElementById('editUsesReceiptRolls').checked = customer.uses_receipt_rolls || false;
                document.getElementById('editOptOut').checked = customer.opt_out || false;
                document.getElementById('editInvoiceStreet').value = customer.invoice_address_street || '';
                document.getElementById('editInvoiceNumber').value = customer.invoice_address_number || '';
                document.getElementById('editInvoicePostalCode').value = customer.invoice_address_postal_code || '';
                document.getElementById('editInvoiceCity').value = customer.invoice_address_city || '';
                document.getElementById('editInvoiceCountry').value = customer.invoice_address_country || 'Belgium';
                document.getElementById('editInvoiceLanguageCode').value = customer.invoice_language_code || 'FR';
                document.getElementById('editInvoiceLanguageConfirmed').checked = customer.invoice_language_confirmed || false;
                document.getElementById('editNotes').value = customer.notes || '';
                document.getElementById('editStatus').value = customer.status || 'active';

                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('editCustomerModal'));
                modal.show();

            } catch (error) {
                console.error('Error loading customer for edit:', error);
                showAlert('Failed to load customer data', 'danger');
            }
        }

        // Update customer
        async function updateCustomer() {
            try {
                const form = document.getElementById('editCustomerForm');
                const formData = new FormData(form);
                const customerId = formData.get('customer_id');
                
                const customerData = {
                    company_name: formData.get('company_name'),
                    contact_person: formData.get('contact_person'),
                    email: formData.get('email'),
                    phone: formData.get('phone'),
                    mobile: formData.get('mobile'),
                    vat_number: formData.get('vat_number'),
                    uses_receipt_rolls: formData.has('uses_receipt_rolls'),
                    opt_out: formData.has('opt_out'),
                    invoice_address_street: formData.get('invoice_address_street'),
                    invoice_address_number: formData.get('invoice_address_number'),
                    invoice_address_city: formData.get('invoice_address_city'),
                    invoice_address_postal_code: formData.get('invoice_address_postal_code'),
                    invoice_address_country: formData.get('invoice_address_country'),
                    invoice_language_code: formData.get('invoice_language_code'),
                    invoice_language_confirmed: formData.has('invoice_language_confirmed'),
                    notes: formData.get('notes'),
                    status: formData.get('status')
                };

                const response = await fetch(`/api/customers/${customerId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify(customerData)
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('Customer updated successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('editCustomerModal')).hide();
                    loadCustomers();
                } else {
                    showAlert(result.error || 'Failed to update customer', 'danger');
                }

            } catch (error) {
                console.error('Error updating customer:', error);
                showAlert('Failed to update customer', 'danger');
            }
        }

        // Delete customer
        async function deleteCustomer(id) {
            if (!confirm('Are you sure you want to delete this customer?')) {
                return;
            }

            try {
                const response = await fetch(`/api/customers/${id}`, {
                    method: 'DELETE',
                    headers: getAuthHeader()
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('Customer deleted successfully', 'success');
                    loadCustomers();
                } else {
                    showAlert(result.error || 'Failed to delete customer', 'danger');
                }

            } catch (error) {
                console.error('Error deleting customer:', error);
                showAlert('Failed to delete customer', 'danger');
            }
        }

        // ==================== DELIVERY ADDRESS MANAGEMENT ====================

        // Manage delivery addresses for a customer
        async function manageDeliveryAddresses(customerId, customerName) {
            try {
                document.getElementById('deliveryCustomerName').textContent = customerName;
                document.getElementById('deliveryCustomerId').value = customerId;
                
                // Load delivery addresses
                await loadDeliveryAddresses(customerId);
                
                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('deliveryAddressesModal'));
                modal.show();
                
            } catch (error) {
                console.error('Error loading delivery addresses:', error);
                showAlert('Failed to load delivery addresses', 'danger');
            }
        }

        // Load delivery addresses for a customer
        async function loadDeliveryAddresses(customerId) {
            try {
                const response = await fetch(`/api/customers/${customerId}/delivery-addresses`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load delivery addresses');

                const result = await response.json();
                const addresses = result.data;

                const container = document.getElementById('deliveryAddressesList');
                
                if (addresses.length === 0) {
                    container.innerHTML = `
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-map-marker-alt fa-3x mb-3"></i>
                            <p>No delivery addresses found for this customer.</p>
                            <p>Click "Add Address" to create the first delivery address.</p>
                        </div>
                    `;
                    return;
                }

                const addressesHtml = addresses.map(address => `
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1">
                                    <h6 class="card-title mb-1">
                                        ${address.address_name}
                                        ${address.is_primary ? '<span class="badge bg-primary ms-2">Primary</span>' : ''}
                                        ${address.can_place_orders ? '<span class="badge bg-success ms-2">Can Order</span>' : '<span class="badge bg-secondary ms-2">Centralized Orders</span>'}
                                        <span class="badge ${address.language_confirmed ? 'bg-success' : 'bg-warning'} ms-2">
                                            <i class="fas fa-language me-1"></i>${address.language_code || 'FR'}${address.language_confirmed ? ' ✓' : ' ?'}
                                        </span>
                                    </h6>
                                    <p class="card-text mb-2">
                                        <i class="fas fa-map-marker-alt me-2"></i>
                                        ${address.street} ${address.number}, ${address.city} ${address.postal_code}, ${address.country}
                                    </p>
                                    ${address.contact_person ? `<p class="card-text mb-1"><i class="fas fa-user me-2"></i>${address.contact_person}</p>` : ''}
                                    ${address.contact_phone ? `<p class="card-text mb-1"><i class="fas fa-phone me-2"></i>${address.contact_phone}</p>` : ''}
                                    ${address.contact_email ? `<p class="card-text mb-1"><i class="fas fa-envelope me-2"></i>${address.contact_email}</p>` : ''}
                                    ${address.notes ? `<p class="card-text mb-0 text-muted"><small>${address.notes}</small></p>` : ''}
                                </div>
                                <div class="btn-group btn-group-sm">
                                    <button class="btn btn-outline-primary" onclick="editDeliveryAddress(${address.id})" title="Edit">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-outline-danger" onclick="deleteDeliveryAddress(${address.id})" title="Delete">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');

                container.innerHTML = addressesHtml;

            } catch (error) {
                console.error('Error loading delivery addresses:', error);
                showAlert('Failed to load delivery addresses', 'danger');
            }
        }

        // Show add delivery address form
        function showAddDeliveryAddressForm() {
            document.getElementById('deliveryFormTitle').textContent = 'Add New Delivery Address';
            document.getElementById('deliveryAddressFormData').reset();
            document.getElementById('deliveryAddressId').value = '';
            document.getElementById('deliveryAddressForm').style.display = 'block';
            document.getElementById('deliveryAddressName').focus();
        }

        // Hide delivery address form
        function hideDeliveryAddressForm() {
            document.getElementById('deliveryAddressForm').style.display = 'none';
        }

        // Edit delivery address
        async function editDeliveryAddress(addressId) {
            try {
                // Find the address in the loaded data (we could also make an API call)
                const customerId = document.getElementById('deliveryCustomerId').value;
                const response = await fetch(`/api/customers/${customerId}/delivery-addresses`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load delivery address');

                const result = await response.json();
                const address = result.data.find(addr => addr.id === addressId);

                if (!address) {
                    showAlert('Delivery address not found', 'danger');
                    return;
                }

                // Populate form
                document.getElementById('deliveryFormTitle').textContent = 'Edit Delivery Address';
                document.getElementById('deliveryAddressId').value = address.id;
                document.getElementById('deliveryAddressName').value = address.address_name || '';
                document.getElementById('deliveryContactPerson').value = address.contact_person || '';
                document.getElementById('deliveryStreet').value = address.street || '';
                document.getElementById('deliveryNumber').value = address.number || '';
                document.getElementById('deliveryCity').value = address.city || '';
                document.getElementById('deliveryPostalCode').value = address.postal_code || '';
                document.getElementById('deliveryCountry').value = address.country || '';
                document.getElementById('deliveryLanguageCode').value = address.language_code || 'FR';
                document.getElementById('deliveryLanguageConfirmed').checked = address.language_confirmed || false;
                document.getElementById('deliveryContactPhone').value = address.contact_phone || '';
                document.getElementById('deliveryContactEmail').value = address.contact_email || '';
                document.getElementById('deliveryNotes').value = address.notes || '';
                document.getElementById('deliveryIsPrimary').checked = address.is_primary || false;
                document.getElementById('deliveryCanPlaceOrders').checked = address.can_place_orders || false;

                // Show form
                document.getElementById('deliveryAddressForm').style.display = 'block';

            } catch (error) {
                console.error('Error loading delivery address for edit:', error);
                showAlert('Failed to load delivery address', 'danger');
            }
        }

        // Save delivery address
        async function saveDeliveryAddress() {
            try {
                const form = document.getElementById('deliveryAddressFormData');
                const formData = new FormData(form);
                const customerId = document.getElementById('deliveryCustomerId').value;
                const addressId = document.getElementById('deliveryAddressId').value;

                const addressData = {
                    address_name: formData.get('address_name'),
                    contact_person: formData.get('contact_person'),
                    street: formData.get('street'),
                    number: formData.get('number'),
                    city: formData.get('city'),
                    postal_code: formData.get('postal_code'),
                    country: formData.get('country'),
                    language_code: formData.get('language_code'),
                    language_confirmed: formData.has('language_confirmed'),
                    contact_phone: formData.get('contact_phone'),
                    contact_email: formData.get('contact_email'),
                    notes: formData.get('notes'),
                    is_primary: formData.has('is_primary'),
                    can_place_orders: formData.has('can_place_orders')
                };

                let url, method;
                if (addressId) {
                    // Update existing address
                    url = `/api/customers/delivery-addresses/${addressId}`;
                    method = 'PUT';
                } else {
                    // Create new address
                    url = `/api/customers/${customerId}/delivery-addresses`;
                    method = 'POST';
                }

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify(addressData)
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(addressId ? 'Delivery address updated successfully' : 'Delivery address created successfully', 'success');
                    hideDeliveryAddressForm();
                    await loadDeliveryAddresses(customerId);
                } else {
                    showAlert(result.error || 'Failed to save delivery address', 'danger');
                }

            } catch (error) {
                console.error('Error saving delivery address:', error);
                showAlert('Failed to save delivery address', 'danger');
            }
        }

        // Delete delivery address
        async function deleteDeliveryAddress(addressId) {
            if (!confirm('Are you sure you want to delete this delivery address?')) {
                return;
            }

            try {
                const response = await fetch(`/api/customers/delivery-addresses/${addressId}`, {
                    method: 'DELETE',
                    headers: getAuthHeader()
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('Delivery address deleted successfully', 'success');
                    const customerId = document.getElementById('deliveryCustomerId').value;
                    await loadDeliveryAddresses(customerId);
                } else {
                    showAlert(result.error || 'Failed to delete delivery address', 'danger');
                }

            } catch (error) {
                console.error('Error deleting delivery address:', error);
                showAlert('Failed to delete delivery address', 'danger');
            }
        }

        // ==================== DELIVERY ADDRESS CSV FUNCTIONS ====================

        // Show delivery address upload modal
        function showDeliveryAddressUploadModal() {
            const modal = new bootstrap.Modal(document.getElementById('deliveryAddressUploadModal'));
            modal.show();
        }

        // Download delivery address CSV template
        function downloadDeliveryAddressTemplate() {
            const link = document.createElement('a');
            link.href = '/api/customers/delivery-addresses/template/csv';
            link.download = 'delivery_addresses_template.csv';
            link.click();
        }

        // Upload delivery address CSV
        async function uploadDeliveryAddressCSV() {
            try {
                const form = document.getElementById('deliveryAddressUploadForm');
                const formData = new FormData(form);

                if (!formData.get('csvFile')) {
                    showAlert('Please select a CSV file', 'danger');
                    return;
                }

                const response = await fetch('/api/customers/delivery-addresses/import/csv', {
                    method: 'POST',
                    headers: getAuthHeader(),
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(result.message, 'success');
                    if (result.data.errors && result.data.errors.length > 0) {
                        console.log('Import errors:', result.data.errors);
                        showAlert(`Import completed with ${result.data.errorCount} errors. Check console for details.`, 'warning');
                    }
                    bootstrap.Modal.getInstance(document.getElementById('deliveryAddressUploadModal')).hide();
                    form.reset();
                    
                    // Refresh delivery addresses if modal is open
                    const deliveryModal = document.getElementById('deliveryAddressesModal');
                    if (deliveryModal.classList.contains('show')) {
                        const customerId = document.getElementById('deliveryCustomerId').value;
                        if (customerId) {
                            await loadDeliveryAddresses(customerId);
                        }
                    }
                } else {
                    showAlert(result.error || 'Failed to import delivery addresses', 'danger');
                }

            } catch (error) {
                console.error('Error uploading delivery address CSV:', error);
                showAlert('Failed to upload CSV file', 'danger');
            }
        }

        // Export delivery addresses to CSV
        async function exportDeliveryAddresses() {
            try {
                const response = await fetch('/api/customers/delivery-addresses/export/csv', {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to export delivery addresses');

                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = `delivery_addresses_export_${new Date().toISOString().split('T')[0]}.csv`;
                link.click();
                window.URL.revokeObjectURL(url);

                showAlert('Delivery addresses exported successfully', 'success');

            } catch (error) {
                console.error('Error exporting delivery addresses:', error);
                showAlert('Failed to export delivery addresses', 'danger');
            }
        }

        // Change page
        function changePage(page) {
            currentPage = page;
            loadCustomers();
        }

        // Toggle sidebar
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            
            sidebar.classList.toggle('show');
            mainContent.classList.toggle('expanded');
        }

        // Logout
        function logout() {
            localStorage.removeItem('auth_token');
            window.location.href = '/login';
        }

        // =============================================================================
        // AI AGENT MANAGEMENT FUNCTIONS
        // =============================================================================

        // Load agents and statistics
        async function loadAgents() {
            try {
                const response = await fetch('/api/agents', {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load agents');

                const result = await response.json();
                displayAgents(result.agents);

            } catch (error) {
                console.error('Error loading agents:', error);
                document.getElementById('agentsTableBody').innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center text-danger py-4">
                            <i class="fas fa-exclamation-triangle me-2"></i>Failed to load agents
                        </td>
                    </tr>`;
                showAlert('Failed to load agents', 'danger');
            }
        }

        // Load agent statistics
        async function loadAgentStats() {
            try {
                const response = await fetch('/api/agents', {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load agent stats');

                const result = await response.json();
                const agents = result.agents;

                // Calculate statistics
                const totalAgents = agents.length;
                const activeAgents = agents.filter(a => a.is_active).length;
                const totalKnowledge = agents.reduce((sum, a) => sum + parseInt(a.knowledge_count || 0), 0);
                const testCalls = 0; // TODO: Calculate from call logs

                // Update statistics display
                document.getElementById('totalAgentsCount').textContent = totalAgents;
                document.getElementById('activeAgentsCount').textContent = activeAgents;
                document.getElementById('totalKnowledgeCount').textContent = totalKnowledge;
                document.getElementById('testCallsCount').textContent = testCalls;

            } catch (error) {
                console.error('Error loading agent stats:', error);
                showAlert('Failed to load agent statistics', 'danger');
            }
        }

        // Display agents in table
        function displayAgents(agents) {
            const tbody = document.getElementById('agentsTableBody');
            
            if (agents.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="text-center py-4">
                            <div class="text-muted">
                                <i class="fas fa-robot fa-3x mb-3 d-block"></i>
                                <h6>No AI agents found</h6>
                                <p>Create your first AI agent to get started</p>
                                <button class="btn btn-primary btn-sm" onclick="showCreateAgentModal()">
                                    <i class="fas fa-plus me-2"></i>Create Agent
                                </button>
                            </div>
                        </td>
                    </tr>`;
                return;
            }

            tbody.innerHTML = agents.map(agent => `
                <tr>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3" 
                                 style="width: 40px; height: 40px;">
                                <i class="fas fa-robot"></i>
                            </div>
                            <div>
                                <h6 class="mb-0">${escapeHtml(agent.name)}</h6>
                                <small class="text-muted">ID: ${agent.id}</small>
                            </div>
                        </div>
                    </td>
                    <td>
                        <span class="text-muted">${escapeHtml(agent.description || 'No description')}</span>
                    </td>
                    <td>
                        <span class="badge bg-info">${agent.knowledge_count || 0} entries</span>
                    </td>
                    <td>
                        <div class="small">
                            <div><strong>Voice:</strong> ${escapeHtml(agent.voice_settings?.voice || 'alloy')}</div>
                            <div><strong>Speed:</strong> ${agent.voice_settings?.speed || 1.0}x</div>
                            <div><strong>Language:</strong> ${escapeHtml(agent.voice_settings?.language || 'en')}</div>
                        </div>
                    </td>
                    <td>
                        <span class="badge ${agent.is_active ? 'bg-success' : 'bg-secondary'}">
                            ${agent.is_active ? 'Active' : 'Inactive'}
                        </span>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-primary" onclick="editAgent(${agent.id})" title="Edit Agent">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-outline-success" onclick="testAgent(${agent.id})" title="Test Agent">
                                <i class="fas fa-phone"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteAgent(${agent.id})" title="Delete Agent">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        // Show create agent modal
        function showCreateAgentModal() {
            // Reset form
            document.getElementById('agentForm').reset();
            document.getElementById('agentId').value = '';
            document.getElementById('agentModalTitle').textContent = 'Create New Agent';
            
            // Set default values
            document.getElementById('voiceModel').value = 'alloy';
            document.getElementById('voiceSpeed').value = '1.0';
            document.getElementById('voiceSpeedValue').textContent = '1.0x';
            document.getElementById('voiceLanguage').value = 'en';
            document.getElementById('supportedLanguage').value = 'en';
            document.getElementById('supportedLanguage').value = 'en';
            
            // Clear knowledge entries
            document.getElementById('knowledgeEntries').innerHTML = '';
            
            // Show modal
            new bootstrap.Modal(document.getElementById('agentModal')).show();
        }

        // Edit agent
        async function editAgent(id) {
            try {
                const response = await fetch(`/api/agents/${id}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load agent');

                const result = await response.json();
                const agent = result.agent;

                // Populate form
                document.getElementById('agentId').value = agent.id;
                document.getElementById('agentName').value = agent.name || '';
                document.getElementById('agentDescription').value = agent.description || '';
                document.getElementById('systemPrompt').value = agent.system_prompt || '';
                document.getElementById('supportedLanguage').value = agent.supported_language || 'en';
                
                // Voice settings
                const voiceSettings = agent.voice_settings || {};
                document.getElementById('voiceModel').value = voiceSettings.voice || 'alloy';
                document.getElementById('voiceSpeed').value = voiceSettings.speed || 1.0;
                document.getElementById('voiceSpeedValue').textContent = `${voiceSettings.speed || 1.0}x`;
                document.getElementById('voiceLanguage').value = voiceSettings.language || 'en';
                
                // Supported language
                document.getElementById('supportedLanguage').value = agent.supported_language || 'en';

                // Load knowledge entries
                loadKnowledgeEntries(agent.knowledge || []);

                // Update modal title
                document.getElementById('agentModalTitle').textContent = `Edit Agent: ${agent.name}`;

                // Show modal
                new bootstrap.Modal(document.getElementById('agentModal')).show();

            } catch (error) {
                console.error('Error loading agent:', error);
                showAlert('Failed to load agent details', 'danger');
            }
        }

        // Load knowledge entries in the form
        function loadKnowledgeEntries(knowledgeList) {
            const container = document.getElementById('knowledgeEntries');
            container.innerHTML = knowledgeList.map((knowledge, index) => `
                <div class="border rounded p-3 mb-3 knowledge-entry" data-knowledge-id="${knowledge.id}">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Title</label>
                            <input type="text" class="form-control" name="knowledge_title_${index}" 
                                   value="${escapeHtml(knowledge.title)}" required>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Type</label>
                            <select class="form-select" name="knowledge_type_${index}">
                                <option value="text" ${knowledge.file_type === 'text' ? 'selected' : ''}>Text</option>
                                <option value="url" ${knowledge.file_type === 'url' ? 'selected' : ''}>URL</option>
                                <option value="file" ${knowledge.file_type === 'file' ? 'selected' : ''}>File</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">File URL (if applicable)</label>
                            <input type="url" class="form-control" name="knowledge_url_${index}" 
                                   value="${escapeHtml(knowledge.file_url || '')}">
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeKnowledgeEntry(this)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                        <div class="col-12 mt-3">
                            <label class="form-label">Content</label>
                            <textarea class="form-control" name="knowledge_content_${index}" rows="3">${escapeHtml(knowledge.content || '')}</textarea>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Add new knowledge entry
        function addKnowledgeEntry() {
            const container = document.getElementById('knowledgeEntries');
            const index = container.children.length;
            
            const entryHtml = `
                <div class="border rounded p-3 mb-3 knowledge-entry" data-knowledge-id="new">
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Title</label>
                            <input type="text" class="form-control" name="knowledge_title_${index}" required>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Type</label>
                            <select class="form-select" name="knowledge_type_${index}">
                                <option value="text" selected>Text</option>
                                <option value="url">URL</option>
                                <option value="file">File</option>
                            </select>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">File URL (if applicable)</label>
                            <input type="url" class="form-control" name="knowledge_url_${index}">
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeKnowledgeEntry(this)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                        <div class="col-12 mt-3">
                            <label class="form-label">Content</label>
                            <textarea class="form-control" name="knowledge_content_${index}" rows="3" placeholder="Enter knowledge content here..."></textarea>
                        </div>
                    </div>
                </div>
            `;
            
            container.insertAdjacentHTML('beforeend', entryHtml);
        }

        // Remove knowledge entry
        function removeKnowledgeEntry(button) {
            button.closest('.knowledge-entry').remove();
        }

        // Save agent
        async function saveAgent() {
            try {
                const form = document.getElementById('agentForm');
                const formData = new FormData(form);
                
                const agentId = document.getElementById('agentId').value;
                const isEdit = agentId && agentId !== '';

                // Prepare agent data
                const agentData = {
                    name: formData.get('name'),
                    description: formData.get('description'),
                    system_prompt: formData.get('system_prompt'),
                    supported_language: document.getElementById('supportedLanguage').value,
                    voice_settings: {
                        voice: formData.get('voice') || document.getElementById('voiceModel').value,
                        speed: parseFloat(document.getElementById('voiceSpeed').value),
                        language: document.getElementById('voiceLanguage').value
                    }
                };

                // Save agent
                const agentUrl = isEdit ? `/api/agents/${agentId}` : '/api/agents';
                const agentMethod = isEdit ? 'PUT' : 'POST';
                
                const agentResponse = await fetch(agentUrl, {
                    method: agentMethod,
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify(agentData)
                });

                if (!agentResponse.ok) throw new Error('Failed to save agent');

                const agentResult = await agentResponse.json();
                const savedAgentId = agentResult.agent.id;

                // Handle knowledge entries
                await saveKnowledgeEntries(savedAgentId);

                // Success
                showAlert(agentResult.message, 'success');
                bootstrap.Modal.getInstance(document.getElementById('agentModal')).hide();
                
                // Reload agents
                loadAgents();
                loadAgentStats();

            } catch (error) {
                console.error('Error saving agent:', error);
                showAlert('Failed to save agent', 'danger');
            }
        }

        // Save knowledge entries
        async function saveKnowledgeEntries(agentId) {
            const knowledgeEntries = document.querySelectorAll('.knowledge-entry');
            
            for (let i = 0; i < knowledgeEntries.length; i++) {
                const entry = knowledgeEntries[i];
                const index = i;
                
                const knowledgeData = {
                    title: entry.querySelector(`[name="knowledge_title_${index}"]`).value,
                    content: entry.querySelector(`[name="knowledge_content_${index}"]`).value,
                    file_url: entry.querySelector(`[name="knowledge_url_${index}"]`).value || null,
                    file_type: entry.querySelector(`[name="knowledge_type_${index}"]`).value
                };

                // Skip empty entries
                if (!knowledgeData.title || (!knowledgeData.content && !knowledgeData.file_url)) {
                    continue;
                }

                const knowledgeId = entry.dataset.knowledgeId;
                const isNewKnowledge = knowledgeId === 'new';

                const knowledgeUrl = isNewKnowledge ? 
                    `/api/agents/${agentId}/knowledge` : 
                    `/api/agents/${agentId}/knowledge/${knowledgeId}`;
                const knowledgeMethod = isNewKnowledge ? 'POST' : 'PUT';

                const response = await fetch(knowledgeUrl, {
                    method: knowledgeMethod,
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify(knowledgeData)
                });

                if (!response.ok) {
                    console.warn(`Failed to save knowledge entry: ${knowledgeData.title}`);
                }
            }
        }

        // Test agent
        function testAgent(id) {
            // Get agent details for display
            fetch(`/api/agents/${id}`, { headers: getAuthHeader() })
                .then(response => response.json())
                .then(result => {
                    document.getElementById('testAgentId').value = id;
                    document.getElementById('testAgentName').textContent = result.agent.name;
                    
                    // Show test modal
                    const modal = new bootstrap.Modal(document.getElementById('testAgentModal'));
                    modal.show();
                    
                    // Setup event handlers AFTER modal is shown
                    document.getElementById('testAgentModal').addEventListener('shown.bs.modal', function setupModalHandlers() {
                        console.log('Setting up voice test event handlers...');
                        
                        // Setup voice test button event handler (green button inside modal)
                        const startVoiceTestBtn = document.getElementById('startVoiceTest');
                        if (startVoiceTestBtn) {
                            startVoiceTestBtn.onclick = function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                console.log('Green Start Voice Test button clicked');
                                startVoiceTest();
                            };
                        }
                        
                        // Setup end voice test button event handler
                        const endVoiceTestBtn = document.getElementById('endVoiceTest');
                        if (endVoiceTestBtn) {
                            endVoiceTestBtn.onclick = function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                console.log('End Voice Test button clicked');
                                endVoiceTest();
                            };
                        }
                        
                        // Setup test mode radio buttons
                        const testModeRadios = document.querySelectorAll('input[name="testMode"]');
                        testModeRadios.forEach(radio => {
                            radio.addEventListener('change', updateTestMode);
                        });
                        
                        // Initialize test mode
                        updateTestMode();
                        
                        // Remove this event listener so it doesn't fire multiple times
                        this.removeEventListener('shown.bs.modal', setupModalHandlers);
                    });
                })
                .catch(error => {
                    console.error('Error loading agent for test:', error);
                    showAlert('Failed to load agent details', 'danger');
                });
        }

        // Initiate test call
        async function initiateTestCall() {
            try {
                const agentId = document.getElementById('testAgentId').value;
                const phoneNumber = document.getElementById('testPhoneNumber').value;
                const scenario = document.getElementById('testScenario').value;

                if (!phoneNumber) {
                    showAlert('Please enter a phone number', 'warning');
                    return;
                }

                // Show LiveKit and OpenAI status while initiating
                const livekitStatus = document.getElementById('livekitStatus');
                const openaiStatus = document.getElementById('openaiStatus');
                livekitStatus.style.display = 'block';
                openaiStatus.style.display = 'block';
                document.getElementById('livekitSessionStatus').textContent = 'Initiating call...';
                document.getElementById('openaiSessionStatus').textContent = 'Creating AI session...';

                const response = await fetch(`/api/agents/${agentId}/test-call`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify({
                        phone_number: phoneNumber,
                        test_scenario: scenario
                    })
                });

                if (!response.ok) throw new Error('Failed to initiate test call');

                const result = await response.json();
                
                // Update LiveKit and OpenAI status with call details
                if (result.call_details && result.call_details.call_control_id) {
                    const callControlId = result.call_details.call_control_id;
                    
                    // Update LiveKit status
                    document.getElementById('livekitRoom').textContent = `agent-call-${callControlId}`;
                    document.getElementById('livekitAgent').textContent = result.agent.name;
                    document.getElementById('livekitSessionStatus').textContent = 'Call initiated - Waiting for answer...';
                    
                    // Update OpenAI status
                    document.getElementById('openaiSessionId').textContent = callControlId;
                    document.getElementById('openaiSessionStatus').textContent = 'AI session created - Ready for conversation';
                    document.getElementById('openaiStatus').className = 'alert alert-success';
                    
                    // Monitor call status and sessions
                    monitorAgentCall(agentId, callControlId);
                }
                
                showAlert('Agent test call initiated successfully! Real-time AI conversation enabled.', 'success');
                
                // Don't hide modal immediately - let user see LiveKit status
                setTimeout(() => {
                    // Clear form but keep modal open to monitor call
                    document.getElementById('testPhoneNumber').value = '';
                }, 1000);

            } catch (error) {
                console.error('Error initiating test call:', error);
                showAlert('Failed to initiate test call', 'danger');
                document.getElementById('livekitStatus').style.display = 'none';
                document.getElementById('openaiStatus').style.display = 'none';
            }
        }

        // Monitor agent call status and LiveKit session
        function monitorAgentCall(agentId, callControlId) {
            console.log(`📊 Monitoring agent call: ${callControlId}`);
            
            // Join Socket.IO room for this agent session
            if (typeof io !== 'undefined') {
                const socket = io();
                
                socket.emit('join-agent-session', {
                    callControlId: callControlId,
                    agentId: agentId
                });
                
                // Listen for agent session updates
                socket.on('agent-session-joined', (data) => {
                    console.log('🤖 Joined agent session monitoring:', data);
                    document.getElementById('livekitSessionStatus').textContent = 'Monitoring active';
                });
                
                socket.on('livekit-event', (data) => {
                    console.log('🎯 LiveKit event:', data);
                    
                    if (data.eventType === 'participant_connected') {
                        document.getElementById('livekitSessionStatus').textContent = 'Live conversation active';
                        document.getElementById('livekitStatus').className = 'alert alert-success';
                    } else if (data.eventType === 'participant_disconnected') {
                        document.getElementById('livekitSessionStatus').textContent = 'Call ended';
                        document.getElementById('livekitStatus').className = 'alert alert-secondary';
                        
                        // Auto-hide after call ends
                        setTimeout(() => {
                            document.getElementById('livekitStatus').style.display = 'none';
                            document.getElementById('openaiStatus').style.display = 'none';
                            bootstrap.Modal.getInstance(document.getElementById('testAgentModal')).hide();
                        }, 3000);
                    }
                });
                
                // Check for LiveKit session details after a few seconds
                setTimeout(async () => {
                    try {
                        const sessionResponse = await fetch(`/api/agents/${agentId}/livekit-session/${callControlId}`, {
                            headers: getAuthHeader()
                        });
                        
                        if (sessionResponse.ok) {
                            const sessionData = await sessionResponse.json();
                            console.log('🎯 LiveKit session details:', sessionData);
                            
                            if (sessionData.livekit && sessionData.livekit.roomName) {
                                document.getElementById('livekitRoom').textContent = sessionData.livekit.roomName;
                                document.getElementById('livekitSessionStatus').textContent = 'LiveKit session active';
                                document.getElementById('livekitStatus').className = 'alert alert-success';
                            }
                        }
                    } catch (error) {
                        console.warn('Could not get LiveKit session details:', error);
                        document.getElementById('livekitSessionStatus').textContent = 'Basic call mode (no LiveKit)';
                    }
                }, 5000);
                
                // Monitor OpenAI session status
                monitorOpenAISession(callControlId);
            }
        }
        
        // Monitor OpenAI Realtime session
        function monitorOpenAISession(callControlId) {
            console.log(`🧠 Monitoring OpenAI session for call: ${callControlId}`);
            
            // Check OpenAI session status periodically
            const checkOpenAISession = async () => {
                try {
                    const response = await fetch(`/api/openai-sessions/${callControlId}`);
                    
                    if (response.ok) {
                        const sessionData = await response.json();
                        console.log('🧠 OpenAI session status:', sessionData);
                        
                        if (sessionData.session) {
                            document.getElementById('openaiSessionId').textContent = sessionData.session.sessionId || callControlId;
                            document.getElementById('openaiSessionStatus').textContent = `Active (${sessionData.session.status})`;
                            
                            // Update message count if available
                            if (sessionData.session.conversationLength !== undefined) {
                                document.getElementById('openaiMessageCount').textContent = sessionData.session.conversationLength;
                            }
                            
                            // Set status color based on session status
                            const openaiStatusDiv = document.getElementById('openaiStatus');
                            if (sessionData.session.status === 'active') {
                                openaiStatusDiv.className = 'alert alert-success';
                            } else if (sessionData.session.status === 'connecting') {
                                openaiStatusDiv.className = 'alert alert-warning';
                            } else {
                                openaiStatusDiv.className = 'alert alert-info';
                            }
                        }
                    } else if (response.status === 404) {
                        // Session not found or ended
                        document.getElementById('openaiSessionStatus').textContent = 'Session ended';
                        document.getElementById('openaiStatus').className = 'alert alert-secondary';
                    }
                } catch (error) {
                    console.warn('Could not get OpenAI session status:', error);
                    document.getElementById('openaiSessionStatus').textContent = 'Status unavailable';
                }
            };
            
            // Check immediately and then every 5 seconds
            checkOpenAISession();
            const intervalId = setInterval(checkOpenAISession, 5000);
            
            // Clear interval after 5 minutes to avoid endless polling
            setTimeout(() => {
                clearInterval(intervalId);
                console.log('🧠 Stopped monitoring OpenAI session');
            }, 5 * 60 * 1000);
        }

        // Delete agent
        async function deleteAgent(id) {
            if (!confirm('Are you sure you want to delete this agent? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/api/agents/${id}`, {
                    method: 'DELETE',
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to delete agent');

                const result = await response.json();
                showAlert(result.message, 'success');
                
                // Reload agents
                loadAgents();
                loadAgentStats();

            } catch (error) {
                console.error('Error deleting agent:', error);
                showAlert('Failed to delete agent', 'danger');
            }
        }

        // Test voice preview
        function testVoice() {
            const voice = document.getElementById('voiceModel').value;
            const speed = document.getElementById('voiceSpeed').value;
            const language = document.getElementById('voiceLanguage').value;
            
            // This would ideally make a request to generate a sample voice
            showAlert(`Voice test: ${voice} at ${speed}x speed in ${language}. (Preview functionality coming soon!)`, 'info');
        }

        // Update voice speed display
        document.addEventListener('DOMContentLoaded', function() {
            const speedSlider = document.getElementById('voiceSpeed');
            if (speedSlider) {
                speedSlider.addEventListener('input', function() {
                    document.getElementById('voiceSpeedValue').textContent = `${this.value}x`;
                });
            }
        });

        // Utility function for HTML escaping
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Call Management Functions
        async function loadCalls() {
            try {
                const direction = document.getElementById('callDirectionFilter')?.value || 'all';
                const status = document.getElementById('callStatusFilter')?.value || 'all';
                const startDate = document.getElementById('callStartDate')?.value || '';
                const endDate = document.getElementById('callEndDate')?.value || '';

                const params = new URLSearchParams({
                    page: 1,
                    limit: 20,
                    direction: direction,
                    status: status,
                    start_date: startDate,
                    end_date: endDate
                });

                const response = await fetch(`/api/calls?${params}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load calls');

                const result = await response.json();
                displayCalls(result.data);

            } catch (error) {
                console.error('Error loading calls:', error);
                showAlert('Failed to load calls', 'danger');
            }
        }

        async function loadCallStats() {
            try {
                const response = await fetch('/api/calls/stats/summary', {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load call stats');

                const result = await response.json();
                const stats = result.data.summary;

                document.getElementById('totalCallsCount').textContent = stats.total_calls || '0';
                document.getElementById('completedCallsCount').textContent = stats.completed_calls || '0';
                document.getElementById('followUpCallsCount').textContent = stats.follow_up_required || '0';
                
                const avgDuration = stats.avg_duration ? Math.round(stats.avg_duration / 60) : 0;
                document.getElementById('avgCallDuration').textContent = `${avgDuration}m`;

            } catch (error) {
                console.error('Error loading call stats:', error);
            }
        }

        function displayCalls(data) {
            const container = document.getElementById('callsTable');
            
            if (data.calls.length === 0) {
                container.innerHTML = '<p class="text-muted">No calls found</p>';
                return;
            }

            const tableHtml = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date/Time</th>
                                <th>Customer</th>
                                <th>Phone</th>
                                <th>Direction</th>
                                <th>Duration</th>
                                <th>Status</th>
                                <th>Sentiment</th>
                                <th>Follow-up</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${data.calls.map(call => {
                                const date = new Date(call.created_at).toLocaleString();
                                const duration = call.duration ? `${Math.floor(call.duration / 60)}:${String(call.duration % 60).padStart(2, '0')}` : '-';
                                const customer = call.company_name || 'Unknown';
                                
                                const directionIcon = call.direction === 'inbound' ? 'fa-phone' : 'fa-phone-volume';
                                const directionColor = call.direction === 'inbound' ? 'text-success' : 'text-primary';
                                
                                const statusColor = 
                                    call.status === 'completed' ? 'bg-success' :
                                    call.status === 'missed' ? 'bg-danger' :
                                    call.status === 'busy' ? 'bg-warning' : 'bg-secondary';

                                const sentimentColor = 
                                    call.sentiment === 'positive' ? 'text-success' :
                                    call.sentiment === 'negative' ? 'text-danger' : 'text-muted';

                                const optOutWarning = call.opt_out ? '<i class="fas fa-ban text-danger" title="Customer opted out"></i> ' : '';

                                return `
                                    <tr>
                                        <td>
                                            <small>${date}</small>
                                        </td>
                                        <td>
                                            ${optOutWarning}<strong>${customer}</strong>
                                            ${call.contact_person ? `<br><small class="text-muted">${call.contact_person}</small>` : ''}
                                        </td>
                                        <td>${call.phone_number}</td>
                                        <td>
                                            <i class="fas ${directionIcon} ${directionColor} me-1"></i>
                                            ${call.direction}
                                        </td>
                                        <td>${duration}</td>
                                        <td>
                                            <span class="badge ${statusColor}">${call.status}</span>
                                        </td>
                                        <td>
                                            ${call.sentiment ? `<span class="${sentimentColor}">${call.sentiment}</span>` : '-'}
                                        </td>
                                        <td>
                                            ${call.follow_up_required ? '<i class="fas fa-flag text-warning"></i>' : '-'}
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" onclick="viewCall(${call.id})" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" onclick="deleteCall(${call.id})" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                </div>
            `;

            container.innerHTML = tableHtml;
        }

        async function showAddCallModal() {
            // Load customers for dropdown
            try {
                const response = await fetch('/api/customers?limit=1000', {
                    headers: getAuthHeader()
                });

                if (response.ok) {
                    const result = await response.json();
                    const customerSelect = document.getElementById('callCustomer');
                    customerSelect.innerHTML = '<option value="">Select Customer (Optional)</option>';
                    
                    result.data.customers.forEach(customer => {
                        const option = document.createElement('option');
                        option.value = customer.id;
                        option.textContent = `${customer.company_name}${customer.contact_person ? ' - ' + customer.contact_person : ''}`;
                        option.dataset.phone = customer.phone || customer.mobile || '';
                        if (customer.opt_out) {
                            option.textContent += ' (Opted Out)';
                            option.style.color = 'red';
                        }
                        customerSelect.appendChild(option);
                    });

                    // Auto-fill phone number when customer is selected
                    customerSelect.addEventListener('change', function() {
                        const selectedOption = this.options[this.selectedIndex];
                        const phoneInput = document.querySelector('#addCallForm input[name="phone_number"]');
                        if (selectedOption.dataset.phone) {
                            phoneInput.value = selectedOption.dataset.phone;
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading customers:', error);
            }

            const modal = new bootstrap.Modal(document.getElementById('addCallModal'));
            modal.show();
        }

        async function saveCall() {
            try {
                const form = document.getElementById('addCallForm');
                const formData = new FormData(form);
                
                const callData = {
                    customer_id: formData.get('customer_id') || null,
                    phone_number: formData.get('phone_number'),
                    direction: formData.get('direction'),
                    duration: parseInt(formData.get('duration')) || 0,
                    status: formData.get('status'),
                    recording_url: formData.get('recording_url') || null,
                    ai_summary: formData.get('ai_summary') || null,
                    sentiment: formData.get('sentiment') || null,
                    follow_up_required: formData.has('follow_up_required')
                };

                const response = await fetch('/api/calls', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify(callData)
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('Call logged successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('addCallModal')).hide();
                    form.reset();
                    loadCalls();
                    loadCallStats();
                } else {
                    showAlert(result.error || 'Failed to log call', 'danger');
                }

            } catch (error) {
                console.error('Error saving call:', error);
                showAlert('Failed to log call', 'danger');
            }
        }

        async function viewCall(id) {
            try {
                const response = await fetch(`/api/calls/${id}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load call');

                const result = await response.json();
                const call = result.data;

                const modalHtml = `
                    <div class="modal fade" id="viewCallModal" tabindex="-1">
                        <div class="modal-dialog modal-lg">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title">Call Details</h5>
                                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                                </div>
                                <div class="modal-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>Date/Time:</strong><br>
                                            ${new Date(call.created_at).toLocaleString()}
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Duration:</strong><br>
                                            ${call.duration ? `${Math.floor(call.duration / 60)}:${String(call.duration % 60).padStart(2, '0')}` : 'N/A'}
                                        </div>
                                    </div>
                                    <hr>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <strong>Customer:</strong><br>
                                            ${call.company_name || 'Unknown'}
                                            ${call.contact_person ? `<br><small>${call.contact_person}</small>` : ''}
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Phone:</strong><br>
                                            ${call.phone_number}
                                        </div>
                                    </div>
                                    <hr>
                                    <div class="row">
                                        <div class="col-md-4">
                                            <strong>Direction:</strong><br>
                                            <span class="badge ${call.direction === 'inbound' ? 'bg-success' : 'bg-primary'}">${call.direction}</span>
                                        </div>
                                        <div class="col-md-4">
                                            <strong>Status:</strong><br>
                                            <span class="badge bg-info">${call.status}</span>
                                        </div>
                                        <div class="col-md-4">
                                            <strong>Sentiment:</strong><br>
                                            ${call.sentiment ? `<span class="badge bg-secondary">${call.sentiment}</span>` : 'N/A'}
                                        </div>
                                    </div>
                                    ${call.follow_up_required ? '<hr><div class="alert alert-warning"><i class="fas fa-flag me-2"></i>Follow-up required</div>' : ''}
                                    ${call.ai_summary ? `<hr><div><strong>Summary/Notes:</strong><br><p>${call.ai_summary}</p></div>` : ''}
                                    ${call.recording_url ? `<hr><div><strong>Recording:</strong><br><a href="${call.recording_url}" target="_blank" class="btn btn-outline-primary btn-sm"><i class="fas fa-play me-2"></i>Play Recording</a></div>` : ''}
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // Remove existing modal if any
                const existingModal = document.getElementById('viewCallModal');
                if (existingModal) {
                    existingModal.remove();
                }

                // Add modal to body
                document.body.insertAdjacentHTML('beforeend', modalHtml);

                // Show modal
                const modal = new bootstrap.Modal(document.getElementById('viewCallModal'));
                modal.show();

                // Remove modal from DOM when hidden
                modal._element.addEventListener('hidden.bs.modal', function () {
                    this.remove();
                });

            } catch (error) {
                console.error('Error loading call details:', error);
                showAlert('Failed to load call details', 'danger');
            }
        }

        async function deleteCall(id) {
            if (!confirm('Are you sure you want to delete this call log?')) {
                return;
            }

            try {
                const response = await fetch(`/api/calls/${id}`, {
                    method: 'DELETE',
                    headers: getAuthHeader()
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('Call deleted successfully', 'success');
                    loadCalls();
                    loadCallStats();
                } else {
                    showAlert(result.error || 'Failed to delete call', 'danger');
                }

            } catch (error) {
                console.error('Error deleting call:', error);
                showAlert('Failed to delete call', 'danger');
            }
        }

        // Product Management Functions
        async function loadProducts() {
            try {
                const search = document.getElementById('productSearch')?.value || '';
                const activeOnly = document.getElementById('activeFilter')?.value || 'all';

                const params = new URLSearchParams({
                    page: 1,
                    limit: 50,
                    search: search,
                    active_only: activeOnly
                });

                const response = await fetch(`/api/products?${params}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load products');

                const result = await response.json();
                displayProducts(result.data);

            } catch (error) {
                console.error('Error loading products:', error);
                showAlert('Failed to load products', 'danger');
            }
        }

        async function loadProductStats() {
            try {
                const response = await fetch('/api/products/stats/summary', {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load product stats');

                const result = await response.json();
                const stats = result.data.summary;

                document.getElementById('totalProductsCount').textContent = stats.total_products || '0';
                document.getElementById('activeProductsCount').textContent = stats.active_products || '0';
                document.getElementById('lowStockProductsCount').textContent = stats.low_stock_products || '0';
                document.getElementById('totalStockCount').textContent = stats.total_stock || '0';

            } catch (error) {
                console.error('Error loading product stats:', error);
            }
        }

        // Removed loadProductCategories function as categories are no longer used

        function displayProducts(data) {
            const container = document.getElementById('productsTable');
            
            if (data.products.length === 0) {
                container.innerHTML = '<p class="text-muted">No products found</p>';
                return;
            }

            const tableHtml = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Product Name</th>
                                <th>SKU</th>
                                <th>Price</th>
                                <th>Stock</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${data.products.map(product => {
                                const stockStatus = product.stock_quantity <= 10 ? 'text-danger' : 'text-success';
                                const stockIcon = product.stock_quantity <= 10 ? 'fas fa-exclamation-triangle' : 'fas fa-check-circle';
                                
                                return `
                                    <tr>
                                        <td>
                                            <strong>${product.name}</strong>
                                            ${product.description ? `<br><small class="text-muted">${product.description.substring(0, 60)}${product.description.length > 60 ? '...' : ''}</small>` : ''}
                                        </td>
                                        <td>
                                            <code>${product.sku || 'N/A'}</code>
                                        </td>
                                        <td>
                                            <strong>${product.price ? `€${parseFloat(product.price).toFixed(2)}` : '-'}</strong>
                                            <br><small class="text-muted">From Shopify</small>
                                        </td>
                                        <td>
                                            <span class="${stockStatus}">
                                                <i class="${stockIcon} me-1"></i>
                                                ${product.stock_quantity || 0}
                                            </span>
                                            <br><small class="text-muted">From Shopify</small>
                                        </td>
                                        <td>
                                            <span class="badge ${product.is_active ? 'bg-success' : 'bg-secondary'}">
                                                ${product.is_active ? 'Active' : 'Inactive'}
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" onclick="editProduct(${product.id})" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-success" onclick="syncWithShopify(${product.id})" title="Sync with Shopify">
                                                    <i class="fas fa-sync"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" onclick="deleteProduct(${product.id})" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                </div>
            `;

            container.innerHTML = tableHtml;
        }

        function showAddProductModal() {
            // Clear form
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '';
            document.getElementById('productModalTitle').textContent = 'Add New Product';
            document.getElementById('saveProductBtn').innerHTML = '<i class="fas fa-save me-2"></i>Save Product';
            document.getElementById('productActive').checked = true;
            
            // Clear readonly fields for new products
            document.getElementById('productPrice').value = '';
            document.getElementById('productStock').value = '';

            const modal = new bootstrap.Modal(document.getElementById('productModal'));
            modal.show();
        }

        async function editProduct(id) {
            try {
                const response = await fetch(`/api/products/${id}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load product');

                const result = await response.json();
                const product = result.data;

                // Populate form
                document.getElementById('productId').value = product.id;
                document.getElementById('productName').value = product.name || '';
                document.getElementById('productSku').value = product.sku || '';
                document.getElementById('productDescription').value = product.description || '';
                document.getElementById('productPrice').value = product.price || '';
                document.getElementById('productStock').value = product.stock_quantity || 0;

                document.getElementById('productActive').checked = product.is_active !== false;

                document.getElementById('productModalTitle').textContent = 'Edit Product';
                document.getElementById('saveProductBtn').innerHTML = '<i class="fas fa-save me-2"></i>Update Product';

                const modal = new bootstrap.Modal(document.getElementById('productModal'));
                modal.show();

            } catch (error) {
                console.error('Error loading product for edit:', error);
                showAlert('Failed to load product data', 'danger');
            }
        }

        async function saveProduct() {
            try {
                const form = document.getElementById('productForm');
                const formData = new FormData(form);
                const productId = formData.get('product_id');
                
                const productData = {
                    name: formData.get('name'),
                    sku: formData.get('sku'),
                    description: formData.get('description') || null,
                    is_active: formData.has('is_active')
                };

                const url = productId ? `/api/products/${productId}` : '/api/products';
                const method = productId ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify(productData)
                });

                const result = await response.json();

                if (result.success) {
                    showAlert(`Product ${productId ? 'updated' : 'created'} successfully`, 'success');
                    bootstrap.Modal.getInstance(document.getElementById('productModal')).hide();
                    loadProducts();
                    loadProductStats();
                } else {
                    showAlert(result.error || `Failed to ${productId ? 'update' : 'create'} product`, 'danger');
                }

            } catch (error) {
                console.error('Error saving product:', error);
                showAlert('Failed to save product', 'danger');
            }
        }

        async function deleteProduct(id) {
            if (!confirm('Are you sure you want to delete this product?')) {
                return;
            }

            try {
                const response = await fetch(`/api/products/${id}`, {
                    method: 'DELETE',
                    headers: getAuthHeader()
                });

                const result = await response.json();

                if (result.success) {
                    showAlert('Product deleted successfully', 'success');
                    loadProducts();
                    loadProductStats();
                } else {
                    showAlert(result.error || 'Failed to delete product', 'danger');
                }

            } catch (error) {
                console.error('Error deleting product:', error);
                showAlert('Failed to delete product', 'danger');
            }
        }

        async function syncWithShopify(id) {
            if (!confirm('Sync this product with Shopify? This will update price and stock from Shopify.')) {
                return;
            }

            try {
                // This would normally connect to Shopify API
                // For now, we'll just show that the functionality exists
                showAlert('Shopify sync functionality will be implemented with actual Shopify API integration', 'info');
                
                // Example of what the sync would do:
                // const response = await fetch(`/api/products/${id}/sync-shopify`, {
                //     method: 'PATCH',
                //     headers: {
                //         'Content-Type': 'application/json',
                //         ...getAuthHeader()
                //     },
                //     body: JSON.stringify({ 
                //         price: 12.99, // from Shopify
                //         stock_quantity: 50, // from Shopify
                //         shopify_product_id: 'shopify_123'
                //     })
                // });

            } catch (error) {
                console.error('Error syncing with Shopify:', error);
                showAlert('Failed to sync with Shopify', 'danger');
            }
        }

        async function loadLowStockProducts() {
            try {
                const response = await fetch('/api/products/stock/low', {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load low stock products');

                const result = await response.json();
                
                if (result.data.length === 0) {
                    showAlert('No low stock products found', 'info');
                    return;
                }

                displayProducts({ products: result.data });
                showAlert(`Found ${result.data.length} products with low stock`, 'warning');

            } catch (error) {
                console.error('Error loading low stock products:', error);
                showAlert('Failed to load low stock products', 'danger');
            }
        }

        // Order Management Functions (Basic Implementation)
        async function loadOrders() {
            try {
                const status = document.getElementById('orderStatusFilter')?.value || 'all';
                const startDate = document.getElementById('orderStartDate')?.value || '';
                const endDate = document.getElementById('orderEndDate')?.value || '';

                const params = new URLSearchParams({
                    page: 1,
                    limit: 20,
                    status: status,
                    start_date: startDate,
                    end_date: endDate
                });

                const response = await fetch(`/api/orders?${params}`, {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load orders');

                const result = await response.json();
                displayOrders(result.data);

            } catch (error) {
                console.error('Error loading orders:', error);
                document.getElementById('ordersTable').innerHTML = '<p class="text-muted">Failed to load orders</p>';
            }
        }

        async function loadOrderStats() {
            try {
                const response = await fetch('/api/orders/stats/summary', {
                    headers: getAuthHeader()
                });

                if (!response.ok) throw new Error('Failed to load order stats');

                const result = await response.json();
                const stats = result.data.summary;

                document.getElementById('totalOrdersCount').textContent = stats.total_orders || '0';
                document.getElementById('pendingOrdersCount').textContent = stats.pending_orders || '0';
                document.getElementById('deliveredOrdersCount').textContent = stats.delivered_orders || '0';
                document.getElementById('totalRevenueMoney').textContent = stats.total_revenue ? `€${parseFloat(stats.total_revenue).toFixed(0)}` : '€0';

            } catch (error) {
                console.error('Error loading order stats:', error);
            }
        }

        function displayOrders(data) {
            const container = document.getElementById('ordersTable');
            
            if (data.orders.length === 0) {
                container.innerHTML = '<p class="text-muted">No orders found</p>';
                return;
            }

            const tableHtml = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Order #</th>
                                <th>Customer</th>
                                <th>Items</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${data.orders.map(order => {
                                const statusColors = {
                                    pending: 'bg-warning',
                                    confirmed: 'bg-info',
                                    processing: 'bg-primary',
                                    shipped: 'bg-success',
                                    delivered: 'bg-success',
                                    cancelled: 'bg-danger'
                                };

                                return `
                                    <tr>
                                        <td><strong>${order.order_number}</strong></td>
                                        <td>
                                            ${order.company_name || 'N/A'}
                                            ${order.contact_person ? `<br><small>${order.contact_person}</small>` : ''}
                                        </td>
                                        <td>${order.item_count} item(s)</td>
                                        <td>€${parseFloat(order.total_amount || 0).toFixed(2)}</td>
                                        <td>
                                            <span class="badge ${statusColors[order.status] || 'bg-secondary'}">${order.status}</span>
                                        </td>
                                        <td>${new Date(order.created_at).toLocaleDateString()}</td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" onclick="viewOrder(${order.id})" title="View">
                                                    <i class="fas fa-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-success" onclick="updateOrderStatus(${order.id}, '${order.status}')" title="Update Status">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                `;
                            }).join('')}
                        </tbody>
                    </table>
                </div>
            `;

            container.innerHTML = tableHtml;
        }

        // NOTE: Order creation removed - orders are synced from Shopify

        function viewOrder(id) {
            showAlert('View Order details will be implemented in next update', 'info');
        }

        function updateOrderStatus(id, currentStatus) {
            const statuses = ['pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled'];
            const newStatus = prompt(`Current status: ${currentStatus}\nEnter new status (${statuses.join(', ')}):`, currentStatus);
            
            if (newStatus && statuses.includes(newStatus)) {
                // Implementation would go here
                showAlert('Order status update will be implemented in next update', 'info');
            }
        }

        // Settings Functions
        function updateProfile() {
            showAlert('Profile update functionality will be implemented in next update', 'info');
        }

        async function changePassword() {
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (!newPassword || !confirmPassword) {
                showAlert('Please fill in all password fields', 'error');
                return;
            }

            if (newPassword.length < 6) {
                showAlert('Password must be at least 6 characters long', 'error');
                return;
            }

            if (newPassword !== confirmPassword) {
                showAlert('Passwords do not match', 'error');
                return;
            }

            try {
                const response = await fetch('/api/auth/change-password', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify({
                        newPassword: newPassword
                    })
                });

                const data = await response.json();

                if (data.success) {
                    showAlert('Password changed successfully', 'success');
                    document.getElementById('changePasswordForm').reset();
                } else {
                    showAlert(data.error || 'Failed to change password', 'error');
                }
            } catch (error) {
                console.error('Error changing password:', error);
                showAlert('Error changing password', 'error');
            }
        }

        function showSystemInfo() {
            showAlert('System: AI Sales CRM v1.0\nFeatures: Customer Management, Call Logging, Product Management, Order Management', 'info');
        }

        // Analytics Functions
        async function loadAnalytics() {
            try {
                // Load basic analytics data
                const [customersRes, ordersRes, callsRes] = await Promise.all([
                    fetch('/api/dashboard/stats', { headers: getAuthHeader() }),
                    fetch('/api/orders/stats/summary', { headers: getAuthHeader() }),
                    fetch('/api/calls/stats/summary', { headers: getAuthHeader() })
                ]);

                if (customersRes.ok) {
                    const customerData = await customersRes.json();
                    document.getElementById('analyticsCustomers').textContent = customerData.data.overview.totalCustomers || '0';
                }

                if (ordersRes.ok) {
                    const orderData = await ordersRes.json();
                    const stats = orderData.data.summary;
                    document.getElementById('analyticsRevenue').textContent = stats.total_revenue ? `€${parseFloat(stats.total_revenue).toFixed(0)}` : '€0';
                    document.getElementById('analyticsOrders').textContent = stats.total_orders || '0';
                }

                if (callsRes.ok) {
                    const callData = await callsRes.json();
                    document.getElementById('analyticsCalls').textContent = callData.data.summary.total_calls || '0';
                }

            } catch (error) {
                console.error('Error loading analytics:', error);
            }
        }

        // Utility functions
        function showAlert(message, type) {
            // Create alert element
            const alert = document.createElement('div');
            alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alert.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(alert);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        // Voice Testing Variables
        let voiceTestSession = null;
        let mediaRecorder = null;
        let audioChunks = [];
        let isRecording = false;
        let speechSynthesis = window.speechSynthesis;
        let currentAgentId = null;

        // Test Mode Switching - Event handlers are now set up in testAgent() function when modal is shown

        function updateTestMode() {
            const voiceMode = document.getElementById('voiceTestMode')?.checked;
            const phoneSection = document.getElementById('phoneTestSection');
            const voiceSection = document.getElementById('voiceTestSection');
            const startButton = document.getElementById('startTestButton');

            console.log('updateTestMode called, voiceMode:', voiceMode);

            if (voiceMode) {
                if (phoneSection) phoneSection.style.display = 'none';
                if (voiceSection) voiceSection.style.display = 'block';
                if (startButton) {
                    startButton.innerHTML = '<i class="fas fa-microphone me-2"></i>Start Voice Test';
                    // Remove old onclick and set new one with preventDefault and stopPropagation
                    startButton.onclick = function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('Purple Start Voice Test button clicked');
                        startVoiceTest();
                    };
                }
            } else {
                if (phoneSection) phoneSection.style.display = 'block';
                if (voiceSection) voiceSection.style.display = 'none';
                if (startButton) {
                    startButton.innerHTML = '<i class="fas fa-phone me-2"></i>Start Phone Test';
                    // Remove old onclick and set new one with preventDefault and stopPropagation
                    startButton.onclick = function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        console.log('Purple Start Phone Test button clicked');
                        initiateTestCall();
                    };
                }
            }
        }

        // Voice Test Functions with Language Verification
        async function startVoiceTest() {
            try {
                currentAgentId = document.getElementById('testAgentId').value;
                const scenario = document.getElementById('voiceTestScenario').value;

                // Show status
                const statusDiv = document.getElementById('voiceTestStatus');
                const statusText = document.getElementById('voiceStatusText');
                statusDiv.style.display = 'block';
                statusText.textContent = 'Requesting microphone access...';

                // Request microphone permission
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                
                statusText.textContent = 'Loading agent and language settings...';

                // Get current agent details and language
                const agentResponse = await fetch(`/api/agents/${currentAgentId}`, {
                    headers: getAuthHeader()
                });
                
                if (!agentResponse.ok) throw new Error('Failed to get agent details');
                const agentData = await agentResponse.json();
                const agent = agentData.agent;
                
                // Initialize language verification
                const languageDiv = document.getElementById('languageVerification');
                const detectedLangSpan = document.getElementById('detectedLanguage');
                const customerLangSpan = document.getElementById('customerLanguage');
                const suggestedLangSpan = document.getElementById('suggestedLanguage');
                
                detectedLangSpan.textContent = 'Waiting for speech...';
                customerLangSpan.textContent = agent.supported_language?.toUpperCase() || 'EN';
                languageDiv.style.display = 'block';

                statusText.textContent = 'Creating AI session...';

                // Create voice test session with OpenAI and language verification
                const response = await fetch('/api/openai-sessions/voice-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        agentId: currentAgentId,
                        scenario: scenario,
                        languageVerificationEnabled: true,
                        customerData: {
                            customer_name: 'Test Customer',
                            phone: 'voice-test',
                            language_code: agent.supported_language || 'en',
                            language_confirmed: false // Always false for testing
                        }
                    })
                });

                if (!response.ok) throw new Error('Failed to create voice test session');

                const result = await response.json();
                voiceTestSession = result.sessionId;

                statusText.textContent = 'Ready for conversation! Speak naturally - automatic turn-taking enabled.';
                
                // Show voice controls with automatic turn-taking
                document.getElementById('voiceControls').style.display = 'block';
                document.getElementById('conversationLog').style.display = 'block';
                document.getElementById('startVoiceTest').style.display = 'none';
                document.getElementById('endVoiceTest').style.display = 'inline-block';

                // Setup automatic voice activity detection
                setupVoiceActivityDetection(stream);

                // Add welcome message with language verification
                const welcomeMessage = getLocalizedWelcomeMessage(agent.supported_language || 'en');
                addConversationMessage('Agent', welcomeMessage, true);

                // Speak welcome message
                speakText(welcomeMessage);

                // Setup 30-second inactivity timeout
                startInactivityTimer();

                // Setup language switch handlers
                setupLanguageSwitchHandlers();

            } catch (error) {
                console.error('Error starting voice test:', error);
                showAlert('Failed to start voice test: ' + error.message, 'danger');
                endVoiceTest();
            }
        }

        // Get localized welcome message
        function getLocalizedWelcomeMessage(language) {
            const messages = {
                'en': 'Hello! I\'m ready to help you with your receipt roll needs. How can I assist you today?',
                'fr': 'Bonjour! Je suis prêt à vous aider avec vos besoins en rouleaux de reçus. Comment puis-je vous aider aujourd\'hui?',
                'nl': 'Hallo! Ik ben klaar om u te helpen met uw kassarolbehoeften. Hoe kan ik u vandaag helpen?',
                'de': 'Hallo! Ich bin bereit, Ihnen bei Ihren Kassenrollenbedürfnissen zu helfen. Wie kann ich Ihnen heute helfen?',
                'es': '¡Hola! Estoy listo para ayudarte con tus necesidades de rollos de recibo. ¿Cómo puedo ayudarte hoy?',
                'it': 'Ciao! Sono pronto ad aiutarti con le tue esigenze di rotoli ricevuta. Come posso aiutarti oggi?'
            };
            return messages[language] || messages['en'];
        }

        // Voice Activity Detection and Language Verification
        let voiceActivityContext = null;
        let voiceActivityAnalyser = null;
        let voiceActivityTimeout = null;
        let inactivityTimeout = null;
        let isLanguageVerified = false;
        let currentCustomerLanguage = null;

        function setupVoiceActivityDetection(stream) {
            // Create audio context for voice activity detection
            voiceActivityContext = new (window.AudioContext || window.webkitAudioContext)();
            const source = voiceActivityContext.createMediaStreamSource(stream);
            voiceActivityAnalyser = voiceActivityContext.createAnalyser();
            
            voiceActivityAnalyser.fftSize = 256;
            source.connect(voiceActivityAnalyser);

            // Setup media recorder for continuous recording
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };

            mediaRecorder.onstop = async () => {
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                await processAudioInputWithLanguageDetection(audioBlob);
                audioChunks = [];
            };

            // Start continuous voice activity monitoring
            startVoiceActivityMonitoring();
            
            // Update turn status
            updateTurnStatus('listening');
        }

        function startVoiceActivityMonitoring() {
            const bufferLength = voiceActivityAnalyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);
            let isSpeaking = false;
            let speechStartTime = null;
            
            function monitor() {
                if (!voiceActivityAnalyser) return;

                voiceActivityAnalyser.getByteFrequencyData(dataArray);
                
                // Calculate average volume
                const average = dataArray.reduce((acc, val) => acc + val, 0) / bufferLength;
                const threshold = 30; // Voice activity threshold

                if (average > threshold && !isSpeaking) {
                    // Speech started
                    isSpeaking = true;
                    speechStartTime = Date.now();
                    startRecordingSegment();
                    updateTurnStatus('speaking');
                    resetInactivityTimer();
                } else if (average <= threshold && isSpeaking) {
                    // Check if speech has been quiet for 1 second
                    if (Date.now() - speechStartTime > 1000) {
                        isSpeaking = false;
                        stopRecordingSegment();
                        updateTurnStatus('listening');
                    }
                }

                // Continue monitoring
                if (voiceTestSession) {
                    requestAnimationFrame(monitor);
                }
            }

            monitor();
        }

        function startRecordingSegment() {
            if (mediaRecorder && voiceTestSession && mediaRecorder.state === 'inactive') {
                audioChunks = [];
                mediaRecorder.start();
                isRecording = true;
            }
        }

        function stopRecordingSegment() {
            if (mediaRecorder && isRecording && mediaRecorder.state === 'recording') {
                mediaRecorder.stop();
                isRecording = false;
            }
        }

        function updateTurnStatus(status) {
            const turnStatus = document.getElementById('turnStatus');
            const voiceIndicator = document.getElementById('voiceActivityIndicator');
            
            if (status === 'speaking') {
                turnStatus.textContent = 'You are speaking...';
                voiceIndicator.className = 'voice-activity-indicator speaking';
            } else if (status === 'listening') {
                turnStatus.textContent = 'Listening...';
                voiceIndicator.className = 'voice-activity-indicator listening';
            } else if (status === 'processing') {
                turnStatus.textContent = 'AI is processing...';
                voiceIndicator.className = 'voice-activity-indicator';
            }
        }

        function startInactivityTimer() {
            clearTimeout(inactivityTimeout);
            inactivityTimeout = setTimeout(() => {
                console.log('30 seconds of inactivity - ending test');
                addConversationMessage('System', 'Test ended due to 30 seconds of inactivity.', false);
                endVoiceTest();
            }, 30000); // 30 seconds
        }

        function resetInactivityTimer() {
            clearTimeout(inactivityTimeout);
            startInactivityTimer();
        }

        function startRecording(button, status) {
            if (mediaRecorder && voiceTestSession) {
                mediaRecorder.start();
                isRecording = true;
                button.className = 'btn btn-danger btn-lg me-2';
                button.innerHTML = '<i class="fas fa-stop"></i>';
                status.textContent = 'Recording... (click to stop)';
                status.className = 'badge bg-danger';
            }
        }

        function stopRecording(button, status) {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                button.className = 'btn btn-primary btn-lg me-2';
                button.innerHTML = '<i class="fas fa-microphone"></i>';
                status.textContent = 'Processing...';
                status.className = 'badge bg-warning';
            }
        }

        async function processAudioInputWithLanguageDetection(audioBlob) {
            try {
                updateTurnStatus('processing');

                // Convert audio to text using Web Speech API (simplified for demo)
                // In production, you'd send the audio to a speech-to-text service
                const audioUrl = URL.createObjectURL(audioBlob);
                
                // For now, simulate speech-to-text by asking user to type
                const userMessage = prompt('Please type what you said (in production this would be automatic speech-to-text):');
                
                if (userMessage && userMessage.trim()) {
                    // Add user message to conversation
                    addConversationMessage('You', userMessage, false);

                    // Perform language detection if not yet verified
                    if (!isLanguageVerified) {
                        await performLanguageVerification(userMessage);
                    }

                    // Send to OpenAI
                    const response = await fetch(`/api/openai-sessions/${voiceTestSession}/message`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            message: userMessage,
                            role: 'user',
                            languageDetected: currentCustomerLanguage
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.response && result.response.content) {
                            // Add AI response to conversation
                            addConversationMessage('Agent', result.response.content, true);
                            
                            // Speak the response
                            speakText(result.response.content);
                        }
                    }

                    resetInactivityTimer();
                }

                updateTurnStatus('listening');

            } catch (error) {
                console.error('Error processing audio:', error);
                updateTurnStatus('listening');
                showAlert('Error processing speech: ' + error.message, 'warning');
            }
        }

        async function performLanguageVerification(speechText) {
            try {
                // Call language detection API
                const response = await fetch('/api/language/detect', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        ...getAuthHeader()
                    },
                    body: JSON.stringify({
                        speechText: speechText,
                        customerId: null // No customer ID for voice testing
                    })
                });

                if (!response.ok) return;

                const result = await response.json();
                const detection = result.detection;
                
                if (detection && detection.language && detection.confidence > 0.5) {
                    // Update UI with detected language
                    const detectedLangSpan = document.getElementById('detectedLanguage');
                    detectedLangSpan.textContent = `${detection.language.toUpperCase()} (${Math.round(detection.confidence * 100)}% confidence)`;

                    // Get current agent language
                    const agentResponse = await fetch(`/api/agents/${currentAgentId}`, {
                        headers: getAuthHeader()
                    });
                    
                    if (agentResponse.ok) {
                        const agentData = await agentResponse.json();
                        const agentLanguage = agentData.agent.supported_language || 'en';

                        // Check if language switch is needed
                        if (detection.language !== agentLanguage && detection.confidence > 0.7) {
                            await suggestLanguageSwitch(detection.language, agentLanguage);
                        } else {
                            // Language matches or confidence too low
                            isLanguageVerified = true;
                            currentCustomerLanguage = agentLanguage;
                            
                            setTimeout(() => {
                                document.getElementById('languageVerification').style.display = 'none';
                            }, 3000);
                        }
                    }
                }
            } catch (error) {
                console.error('Language verification error:', error);
            }
        }

        async function suggestLanguageSwitch(detectedLang, currentLang) {
            try {
                // Check if we have agents for the detected language
                const agentsResponse = await fetch(`/api/language/agents?language=${detectedLang}`, {
                    headers: getAuthHeader()
                });

                if (agentsResponse.ok) {
                    const agents = await agentsResponse.json();
                    
                    if (agents.length > 0) {
                        // Show language switch suggestion
                        const suggestedLangSpan = document.getElementById('suggestedLanguage');
                        const languageNames = {
                            'en': 'English',
                            'fr': 'French', 
                            'nl': 'Dutch',
                            'de': 'German',
                            'es': 'Spanish',
                            'it': 'Italian'
                        };
                        
                        suggestedLangSpan.textContent = languageNames[detectedLang] || detectedLang;
                        document.getElementById('languageSwitch').style.display = 'block';
                        
                        return; // Don't set as verified yet
                    }
                }

                // No agents available for detected language, continue with current
                isLanguageVerified = true;
                currentCustomerLanguage = currentLang;
                
                addConversationMessage('System', `Language detected as ${detectedLang.toUpperCase()}, but no agents available. Continuing with ${currentLang.toUpperCase()} agent.`, false);
                
                setTimeout(() => {
                    document.getElementById('languageVerification').style.display = 'none';
                }, 3000);

            } catch (error) {
                console.error('Error suggesting language switch:', error);
                isLanguageVerified = true;
                currentCustomerLanguage = currentLang;
            }
        }

        function setupLanguageSwitchHandlers() {
            const confirmBtn = document.getElementById('confirmLanguageSwitchBtn');
            const keepBtn = document.getElementById('keepCurrentAgentBtn');

            if (confirmBtn) {
                confirmBtn.onclick = async () => {
                    try {
                        // Get agents for detected language
                        const detectedLang = document.getElementById('detectedLanguage').textContent.split(' ')[0].toLowerCase();
                        const agentsResponse = await fetch(`/api/language/agents?language=${detectedLang}`, {
                            headers: getAuthHeader()
                        });

                        if (agentsResponse.ok) {
                            const agents = await agentsResponse.json();
                            if (agents.length > 0) {
                                // Switch to first available agent
                                const newAgent = agents[0];
                                currentAgentId = newAgent.id;
                                
                                // Update UI and restart session with new agent
                                addConversationMessage('System', `Switching to ${newAgent.name} (${detectedLang.toUpperCase()})...`, false);
                                
                                // Restart voice test with new agent
                                await restartVoiceTestWithNewAgent(newAgent);
                                
                                isLanguageVerified = true;
                                currentCustomerLanguage = detectedLang;
                                document.getElementById('languageVerification').style.display = 'none';
                            }
                        }
                    } catch (error) {
                        console.error('Error switching agent:', error);
                        showAlert('Failed to switch agent', 'danger');
                    }
                };
            }

            if (keepBtn) {
                keepBtn.onclick = () => {
                    isLanguageVerified = true;
                    const agentLang = document.getElementById('customerLanguage').textContent.toLowerCase();
                    currentCustomerLanguage = agentLang;
                    addConversationMessage('System', `Continuing with current ${agentLang.toUpperCase()} agent.`, false);
                    document.getElementById('languageVerification').style.display = 'none';
                };
            }
        }

        async function restartVoiceTestWithNewAgent(newAgent) {
            try {
                // End current session
                if (voiceTestSession) {
                    await fetch(`/api/openai-sessions/${voiceTestSession}/end`, { method: 'POST' });
                }

                // Start new session with new agent
                const scenario = document.getElementById('voiceTestScenario').value;
                const response = await fetch('/api/openai-sessions/voice-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        agentId: newAgent.id,
                        scenario: scenario,
                        languageVerificationEnabled: false, // Skip verification now
                        customerData: {
                            customer_name: 'Test Customer',
                            phone: 'voice-test',
                            language_code: newAgent.supported_language,
                            language_confirmed: true
                        }
                    })
                });

                if (response.ok) {
                    const result = await response.json();
                    voiceTestSession = result.sessionId;
                    
                    // Update agent name in modal
                    document.getElementById('testAgentName').textContent = newAgent.name;
                    
                    // Send welcome message in new language
                    const welcomeMessage = getLocalizedWelcomeMessage(newAgent.supported_language);
                    addConversationMessage('Agent', welcomeMessage, true);
                    speakText(welcomeMessage);
                }
            } catch (error) {
                console.error('Error restarting with new agent:', error);
                throw error;
            }
        }

        function speakText(text) {
            // Stop any current speech
            speechSynthesis.cancel();
            
            // Create new utterance
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.rate = 0.9;
            utterance.pitch = 1;
            utterance.volume = 0.8;
            
            // Try to use a more natural voice
            const voices = speechSynthesis.getVoices();
            const preferredVoice = voices.find(voice => 
                voice.name.includes('Google') || 
                voice.name.includes('Microsoft') ||
                voice.lang.includes('en')
            );
            if (preferredVoice) {
                utterance.voice = preferredVoice;
            }

            speechSynthesis.speak(utterance);
        }

        function addConversationMessage(sender, message, isAgent) {
            const messagesDiv = document.getElementById('conversationMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `mb-2 p-2 rounded ${isAgent ? 'bg-primary text-white' : 'bg-light'}`;
            
            const timestamp = new Date().toLocaleTimeString();
            messageDiv.innerHTML = `
                <strong>${sender}</strong> <small class="opacity-75">${timestamp}</small><br>
                ${message}
            `;
            
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        async function endVoiceTest() {
            try {
                // Stop recording if active
                if (isRecording && mediaRecorder) {
                    mediaRecorder.stop();
                    isRecording = false;
                }

                // Stop speech synthesis
                speechSynthesis.cancel();

                // End OpenAI session
                if (voiceTestSession) {
                    await fetch(`/api/openai-sessions/${voiceTestSession}`, {
                        method: 'DELETE'
                    });
                }

                // Reset UI
                document.getElementById('voiceTestStatus').style.display = 'none';
                document.getElementById('voiceControls').style.display = 'none';
                document.getElementById('conversationLog').style.display = 'none';
                document.getElementById('startVoiceTest').style.display = 'inline-block';
                document.getElementById('endVoiceTest').style.display = 'none';
                document.getElementById('conversationMessages').innerHTML = '';

                voiceTestSession = null;
                mediaRecorder = null;

            } catch (error) {
                console.error('Error ending voice test:', error);
            }
        }

        // Update the existing initiateTest function to handle both modes
        function initiateTest() {
            const voiceMode = document.getElementById('voiceTestMode').checked;
            if (voiceMode) {
                startVoiceTest();
            } else {
                initiateTestCall();
            }
        }
    </script>
</body>
</html>